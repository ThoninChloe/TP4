/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { APP_BOOTSTRAP_LISTENER, InjectionToken, isDevMode, NgModule } from '@angular/core';
import { isAngularInTestMode, NgxsBootstrapper } from '@ngxs/store/internals';
import { INITIAL_STATE_TOKEN, InitialState } from '@ngxs/store/internals';
import { FEATURE_STATE_TOKEN, NG_TEST_MODE, NG_DEV_MODE, NgxsConfig, ROOT_STATE_TOKEN } from './symbols';
import { NGXS_EXECUTION_STRATEGY } from './execution/symbols';
import { StateFactory } from './internal/state-factory';
import { StateContextFactory } from './internal/state-context-factory';
import { Actions, InternalActions } from './actions-stream';
import { LifecycleStateManager } from './internal/lifecycle-state-manager';
import { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';
import { InternalStateOperations } from './internal/state-operations';
import { Store } from './store';
import { SelectFactory } from './decorators/select/select-factory';
import { StateStream } from './internal/state-stream';
import { PluginManager } from './plugin-manager';
import { NgxsRootModule } from './modules/ngxs-root.module';
import { NgxsFeatureModule } from './modules/ngxs-feature.module';
import { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';
import { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';
import { HostEnvironment } from './host-environment/host-environment';
import { ConfigValidator } from './internal/config-validator';
/**
 * Ngxs Module
 */
export class NgxsModule {
    /**
     * Root module factory
     * @param {?=} states
     * @param {?=} options
     * @return {?}
     */
    static forRoot(states = [], options = {}) {
        return {
            ngModule: NgxsRootModule,
            providers: [
                StateFactory,
                StateContextFactory,
                Actions,
                InternalActions,
                NgxsBootstrapper,
                ConfigValidator,
                HostEnvironment,
                LifecycleStateManager,
                InternalDispatcher,
                InternalDispatchedActionResults,
                InternalStateOperations,
                InternalNgxsExecutionStrategy,
                Store,
                StateStream,
                SelectFactory,
                PluginManager,
                ...states,
                ...NgxsModule.ngxsTokenProviders(states, options)
            ]
        };
    }
    /**
     * Feature module factory
     * @param {?=} states
     * @return {?}
     */
    static forFeature(states = []) {
        return {
            ngModule: NgxsFeatureModule,
            providers: [
                StateFactory,
                PluginManager,
                ...states,
                {
                    provide: FEATURE_STATE_TOKEN,
                    multi: true,
                    useValue: states
                }
            ]
        };
    }
    /**
     * @private
     * @param {?} states
     * @param {?} options
     * @return {?}
     */
    static ngxsTokenProviders(states, options) {
        return [
            {
                provide: NG_DEV_MODE,
                useFactory: NgxsModule.isAngularInTestMode
            },
            {
                provide: NG_TEST_MODE,
                useFactory: NgxsModule.isAngularDevMode
            },
            {
                provide: NGXS_EXECUTION_STRATEGY,
                useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy
            },
            {
                provide: ROOT_STATE_TOKEN,
                useValue: states
            },
            {
                provide: NgxsModule.ROOT_OPTIONS,
                useValue: options
            },
            {
                provide: NgxsConfig,
                useFactory: NgxsModule.ngxsConfigFactory,
                deps: [NgxsModule.ROOT_OPTIONS]
            },
            {
                provide: APP_BOOTSTRAP_LISTENER,
                useFactory: NgxsModule.appBootstrapListenerFactory,
                multi: true,
                deps: [NgxsBootstrapper]
            },
            {
                provide: INITIAL_STATE_TOKEN,
                useFactory: NgxsModule.getInitialState
            }
        ];
    }
    /**
     * @private
     * @param {?} options
     * @return {?}
     */
    static ngxsConfigFactory(options) {
        return Object.assign(new NgxsConfig(), options);
    }
    /**
     * @private
     * @param {?} bootstrapper
     * @return {?}
     */
    static appBootstrapListenerFactory(bootstrapper) {
        return (/**
         * @return {?}
         */
        () => bootstrapper.bootstrap());
    }
    /**
     * @private
     * @return {?}
     */
    static isAngularInTestMode() {
        return (/**
         * @return {?}
         */
        () => isAngularInTestMode());
    }
    /**
     * @private
     * @return {?}
     */
    static isAngularDevMode() {
        return (/**
         * @return {?}
         */
        () => isDevMode());
    }
    /**
     * @private
     * @return {?}
     */
    static getInitialState() {
        return InitialState.pop();
    }
}
NgxsModule.ROOT_OPTIONS = new InjectionToken('ROOT_OPTIONS');
NgxsModule.decorators = [
    { type: NgModule }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxsModule.ROOT_OPTIONS;
}
//# sourceMappingURL=data:application/json;base64,