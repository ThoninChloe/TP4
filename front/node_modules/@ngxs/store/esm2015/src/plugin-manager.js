/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';
import { NGXS_PLUGINS } from './symbols';
/**
 * Plugin manager class
 * @ignore
 */
export class PluginManager {
    /**
     * @param {?} _parentManager
     * @param {?} _pluginHandlers
     */
    constructor(_parentManager, _pluginHandlers) {
        this._parentManager = _parentManager;
        this._pluginHandlers = _pluginHandlers;
        this.plugins = [];
        this.registerHandlers();
    }
    /**
     * @private
     * @return {?}
     */
    registerHandlers() {
        this.plugins = this.getPlugins();
        this.registerPluginInManager(this.plugins);
    }
    /**
     * @private
     * @param {?} plugins
     * @return {?}
     */
    registerPluginInManager(plugins) {
        if (this._parentManager) {
            this._parentManager.plugins.push(...plugins);
        }
    }
    /**
     * @private
     * @return {?}
     */
    getPlugins() {
        /** @type {?} */
        const handlers = this._pluginHandlers || [];
        return handlers.map((/**
         * @param {?} plugin
         * @return {?}
         */
        (plugin) => (/** @type {?} */ ((plugin.handle ? plugin.handle.bind(plugin) : plugin)))));
    }
}
PluginManager.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PluginManager.ctorParameters = () => [
    { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }
];
if (false) {
    /** @type {?} */
    PluginManager.prototype.plugins;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._parentManager;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._pluginHandlers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW4tbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQWdCLFlBQVksRUFBYyxNQUFNLFdBQVcsQ0FBQzs7Ozs7QUFPbkUsTUFBTSxPQUFPLGFBQWE7Ozs7O0lBR3hCLFlBR1UsY0FBNkIsRUFHN0IsZUFBNkI7UUFIN0IsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFHN0Isb0JBQWUsR0FBZixlQUFlLENBQWM7UUFSaEMsWUFBTyxHQUFtQixFQUFFLENBQUM7UUFVbEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFTyxnQkFBZ0I7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDakMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDOzs7Ozs7SUFFTyx1QkFBdUIsQ0FBQyxPQUF1QjtRQUNyRCxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUM7U0FDOUM7SUFDSCxDQUFDOzs7OztJQUVPLFVBQVU7O2NBQ1YsUUFBUSxHQUFpQixJQUFJLENBQUMsZUFBZSxJQUFJLEVBQUU7UUFDekQsT0FBTyxRQUFRLENBQUMsR0FBRzs7OztRQUNqQixDQUFDLE1BQWtCLEVBQUUsRUFBRSxDQUNyQixtQkFBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBQSxFQUN0RSxDQUFDO0lBQ0osQ0FBQzs7O1lBaENGLFVBQVU7Ozs7WUFPaUIsYUFBYSx1QkFGcEMsUUFBUSxZQUNSLFFBQVE7d0NBRVIsTUFBTSxTQUFDLFlBQVksY0FDbkIsUUFBUTs7OztJQVBYLGdDQUFvQzs7Ozs7SUFHbEMsdUNBRXFDOzs7OztJQUNyQyx3Q0FFcUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgU2tpcFNlbGYsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzUGx1Z2luRm4sIE5HWFNfUExVR0lOUywgTmd4c1BsdWdpbiB9IGZyb20gJy4vc3ltYm9scyc7XHJcblxyXG4vKipcclxuICogUGx1Z2luIG1hbmFnZXIgY2xhc3NcclxuICogQGlnbm9yZVxyXG4gKi9cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgUGx1Z2luTWFuYWdlciB7XHJcbiAgcHVibGljIHBsdWdpbnM6IE5neHNQbHVnaW5GbltdID0gW107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgQE9wdGlvbmFsKClcclxuICAgIEBTa2lwU2VsZigpXHJcbiAgICBwcml2YXRlIF9wYXJlbnRNYW5hZ2VyOiBQbHVnaW5NYW5hZ2VyLFxyXG4gICAgQEluamVjdChOR1hTX1BMVUdJTlMpXHJcbiAgICBAT3B0aW9uYWwoKVxyXG4gICAgcHJpdmF0ZSBfcGx1Z2luSGFuZGxlcnM6IE5neHNQbHVnaW5bXVxyXG4gICkge1xyXG4gICAgdGhpcy5yZWdpc3RlckhhbmRsZXJzKCk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVySGFuZGxlcnMoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLmdldFBsdWdpbnMoKTtcclxuICAgIHRoaXMucmVnaXN0ZXJQbHVnaW5Jbk1hbmFnZXIodGhpcy5wbHVnaW5zKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgcmVnaXN0ZXJQbHVnaW5Jbk1hbmFnZXIocGx1Z2luczogTmd4c1BsdWdpbkZuW10pOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLl9wYXJlbnRNYW5hZ2VyKSB7XHJcbiAgICAgIHRoaXMuX3BhcmVudE1hbmFnZXIucGx1Z2lucy5wdXNoKC4uLnBsdWdpbnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRQbHVnaW5zKCk6IE5neHNQbHVnaW5GbltdIHtcclxuICAgIGNvbnN0IGhhbmRsZXJzOiBOZ3hzUGx1Z2luW10gPSB0aGlzLl9wbHVnaW5IYW5kbGVycyB8fCBbXTtcclxuICAgIHJldHVybiBoYW5kbGVycy5tYXAoXHJcbiAgICAgIChwbHVnaW46IE5neHNQbHVnaW4pID0+XHJcbiAgICAgICAgPE5neHNQbHVnaW5Gbj4ocGx1Z2luLmhhbmRsZSA/IHBsdWdpbi5oYW5kbGUuYmluZChwbHVnaW4pIDogcGx1Z2luKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuIl19