/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';
import { propGetter } from '../../internal/internals';
import { SelectFactory } from './select-factory';
import { META_KEY } from '../../symbols';
/** @type {?} */
const DOLLAR_CHAR_CODE = 36;
/**
 * @template T
 * @param {?} selector
 * @return {?}
 */
export function createSelectObservable(selector) {
    if (!SelectFactory.store) {
        throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());
    }
    return SelectFactory.store.select(selector);
}
/**
 * @param {?} name
 * @param {?=} rawSelector
 * @param {?=} paths
 * @return {?}
 */
export function createSelectorFn(name, rawSelector, paths = []) {
    rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;
    if (typeof rawSelector === 'string') {
        /** @type {?} */
        const propsArray = paths.length
            ? [rawSelector, ...paths]
            : rawSelector.split('.');
        return propGetter(propsArray, (/** @type {?} */ (SelectFactory.config)));
    }
    else if (rawSelector[META_KEY] && rawSelector[META_KEY].path) {
        return propGetter(rawSelector[META_KEY].path.split('.'), (/** @type {?} */ (SelectFactory.config)));
    }
    return rawSelector;
}
/**
 * \@example If `foo$` => make it just `foo`
 * @param {?} name
 * @return {?}
 */
export function removeDollarAtTheEnd(name) {
    /** @type {?} */
    const lastCharIndex = name.length - 1;
    /** @type {?} */
    const dollarAtTheEnd = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;
    return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ltYm9scy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL2RlY29yYXRvcnMvc2VsZWN0L3N5bWJvbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDakYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDOztNQUVuQyxnQkFBZ0IsR0FBRyxFQUFFOzs7Ozs7QUFFM0IsTUFBTSxVQUFVLHNCQUFzQixDQUFVLFFBQWE7SUFDM0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUU7UUFDeEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLDRCQUE0QixDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2xGO0lBRUQsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUM5QyxDQUFDOzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLElBQVksRUFBRSxXQUFpQixFQUFFLFFBQWtCLEVBQUU7SUFDcEYsV0FBVyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBRXRFLElBQUksT0FBTyxXQUFXLEtBQUssUUFBUSxFQUFFOztjQUM3QixVQUFVLEdBQWEsS0FBSyxDQUFDLE1BQU07WUFDdkMsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsS0FBSyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUMxQixPQUFPLFVBQVUsQ0FBQyxVQUFVLEVBQUUsbUJBQUEsYUFBYSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7S0FDdEQ7U0FBTSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxFQUFFO1FBQzlELE9BQU8sVUFBVSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLG1CQUFBLGFBQWEsQ0FBQyxNQUFNLEVBQUMsQ0FBQyxDQUFDO0tBQ2pGO0lBRUQsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQzs7Ozs7O0FBS0QsTUFBTSxVQUFVLG9CQUFvQixDQUFDLElBQVk7O1VBQ3pDLGFBQWEsR0FBVyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUM7O1VBQ3ZDLGNBQWMsR0FBWSxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxLQUFLLGdCQUFnQjtJQUNuRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM5RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgQ09ORklHX01FU1NBR0VTLCBWQUxJREFUSU9OX0NPREUgfSBmcm9tICcuLi8uLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcbmltcG9ydCB7IHByb3BHZXR0ZXIgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBTZWxlY3RGYWN0b3J5IH0gZnJvbSAnLi9zZWxlY3QtZmFjdG9yeSc7XHJcbmltcG9ydCB7IE1FVEFfS0VZIH0gZnJvbSAnLi4vLi4vc3ltYm9scyc7XHJcblxyXG5jb25zdCBET0xMQVJfQ0hBUl9DT0RFID0gMzY7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlU2VsZWN0T2JzZXJ2YWJsZTxUID0gYW55PihzZWxlY3RvcjogYW55KTogT2JzZXJ2YWJsZTxUPiB7XHJcbiAgaWYgKCFTZWxlY3RGYWN0b3J5LnN0b3JlKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoQ09ORklHX01FU1NBR0VTW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEXSgpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBTZWxlY3RGYWN0b3J5LnN0b3JlLnNlbGVjdChzZWxlY3Rvcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3RvckZuKG5hbWU6IHN0cmluZywgcmF3U2VsZWN0b3I/OiBhbnksIHBhdGhzOiBzdHJpbmdbXSA9IFtdKTogYW55IHtcclxuICByYXdTZWxlY3RvciA9ICFyYXdTZWxlY3RvciA/IHJlbW92ZURvbGxhckF0VGhlRW5kKG5hbWUpIDogcmF3U2VsZWN0b3I7XHJcblxyXG4gIGlmICh0eXBlb2YgcmF3U2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XHJcbiAgICBjb25zdCBwcm9wc0FycmF5OiBzdHJpbmdbXSA9IHBhdGhzLmxlbmd0aFxyXG4gICAgICA/IFtyYXdTZWxlY3RvciwgLi4ucGF0aHNdXHJcbiAgICAgIDogcmF3U2VsZWN0b3Iuc3BsaXQoJy4nKTtcclxuICAgIHJldHVybiBwcm9wR2V0dGVyKHByb3BzQXJyYXksIFNlbGVjdEZhY3RvcnkuY29uZmlnISk7XHJcbiAgfSBlbHNlIGlmIChyYXdTZWxlY3RvcltNRVRBX0tFWV0gJiYgcmF3U2VsZWN0b3JbTUVUQV9LRVldLnBhdGgpIHtcclxuICAgIHJldHVybiBwcm9wR2V0dGVyKHJhd1NlbGVjdG9yW01FVEFfS0VZXS5wYXRoLnNwbGl0KCcuJyksIFNlbGVjdEZhY3RvcnkuY29uZmlnISk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmF3U2VsZWN0b3I7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZXhhbXBsZSBJZiBgZm9vJGAgPT4gbWFrZSBpdCBqdXN0IGBmb29gXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRG9sbGFyQXRUaGVFbmQobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICBjb25zdCBsYXN0Q2hhckluZGV4OiBudW1iZXIgPSBuYW1lLmxlbmd0aCAtIDE7XHJcbiAgY29uc3QgZG9sbGFyQXRUaGVFbmQ6IGJvb2xlYW4gPSBuYW1lLmNoYXJDb2RlQXQobGFzdENoYXJJbmRleCkgPT09IERPTExBUl9DSEFSX0NPREU7XHJcbiAgcmV0dXJuIGRvbGxhckF0VGhlRW5kID8gbmFtZS5zbGljZSgwLCBsYXN0Q2hhckluZGV4KSA6IG5hbWU7XHJcbn1cclxuIl19