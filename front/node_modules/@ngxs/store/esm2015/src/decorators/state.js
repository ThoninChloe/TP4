/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ensureStoreMetadata } from '../internal/internals';
import { META_KEY, META_OPTIONS_KEY } from '../symbols';
import { StoreValidators } from '../utils/store-validators';
/**
 * @record
 * @template T
 */
function MutateMetaOptions() { }
if (false) {
    /** @type {?} */
    MutateMetaOptions.prototype.meta;
    /** @type {?} */
    MutateMetaOptions.prototype.inheritedStateClass;
    /** @type {?} */
    MutateMetaOptions.prototype.optionsWithInheritance;
}
/**
 * Decorates a class with ngxs state information.
 * @template T
 * @param {?} options
 * @return {?}
 */
export function State(options) {
    /**
     * @param {?} inheritedStateClass
     * @return {?}
     */
    function getStateOptions(inheritedStateClass) {
        /** @type {?} */
        const inheritanceOptions = inheritedStateClass[META_OPTIONS_KEY] || {};
        return (/** @type {?} */ (Object.assign({}, inheritanceOptions, options)));
    }
    /**
     * @param {?} params
     * @return {?}
     */
    function mutateMetaData(params) {
        const { meta, inheritedStateClass, optionsWithInheritance } = params;
        const { children, defaults, name } = optionsWithInheritance;
        StoreValidators.checkCorrectStateName(name);
        if (inheritedStateClass.hasOwnProperty(META_KEY)) {
            /** @type {?} */
            const inheritedMeta = inheritedStateClass[META_KEY] || {};
            meta.actions = Object.assign({}, meta.actions, inheritedMeta.actions);
        }
        meta.children = children;
        meta.defaults = defaults;
        meta.name = name;
    }
    return (/**
     * @param {?} target
     * @return {?}
     */
    (target) => {
        /** @type {?} */
        const stateClass = target;
        /** @type {?} */
        const meta = ensureStoreMetadata(stateClass);
        /** @type {?} */
        const inheritedStateClass = Object.getPrototypeOf(stateClass);
        /** @type {?} */
        const optionsWithInheritance = getStateOptions(inheritedStateClass);
        mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });
        stateClass[META_OPTIONS_KEY] = optionsWithInheritance;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3N0YXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsbUJBQW1CLEVBQXFDLE1BQU0sdUJBQXVCLENBQUM7QUFDL0YsT0FBTyxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsRUFBZ0IsTUFBTSxZQUFZLENBQUM7QUFDdEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7OztBQUc1RCxnQ0FJQzs7O0lBSEMsaUNBQW9COztJQUNwQixnREFBd0M7O0lBQ3hDLG1EQUF3Qzs7Ozs7Ozs7QUFNMUMsTUFBTSxVQUFVLEtBQUssQ0FBSSxPQUF3Qjs7Ozs7SUFDL0MsU0FBUyxlQUFlLENBQUMsbUJBQXVDOztjQUN4RCxrQkFBa0IsR0FDdEIsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1FBQzdDLE9BQU8scUNBQUssa0JBQWtCLEVBQUssT0FBTyxHQUFxQixDQUFDO0lBQ2xFLENBQUM7Ozs7O0lBRUQsU0FBUyxjQUFjLENBQUMsTUFBNEI7Y0FDNUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsc0JBQXNCLEVBQUUsR0FBRyxNQUFNO2NBQzlELEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsR0FBRyxzQkFBc0I7UUFDM0QsZUFBZSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBRTVDLElBQUksbUJBQW1CLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxFQUFFOztrQkFDMUMsYUFBYSxHQUEyQixtQkFBbUIsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ2pGLElBQUksQ0FBQyxPQUFPLHFCQUFRLElBQUksQ0FBQyxPQUFPLEVBQUssYUFBYSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1NBQzlEO1FBRUQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQUVEOzs7O0lBQU8sQ0FBQyxNQUFrQixFQUFRLEVBQUU7O2NBQzVCLFVBQVUsR0FBdUIsTUFBTTs7Y0FDdkMsSUFBSSxHQUFrQixtQkFBbUIsQ0FBQyxVQUFVLENBQUM7O2NBQ3JELG1CQUFtQixHQUF1QixNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQzs7Y0FDM0Usc0JBQXNCLEdBQW9CLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQztRQUNwRixjQUFjLENBQUMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDO1FBQ3RFLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLHNCQUFzQixDQUFDO0lBQ3hELENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBlbnN1cmVTdG9yZU1ldGFkYXRhLCBNZXRhRGF0YU1vZGVsLCBTdGF0ZUNsYXNzSW50ZXJuYWwgfSBmcm9tICcuLi9pbnRlcm5hbC9pbnRlcm5hbHMnO1xyXG5pbXBvcnQgeyBNRVRBX0tFWSwgTUVUQV9PUFRJT05TX0tFWSwgU3RvcmVPcHRpb25zIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcbmltcG9ydCB7IFN0b3JlVmFsaWRhdG9ycyB9IGZyb20gJy4uL3V0aWxzL3N0b3JlLXZhbGlkYXRvcnMnO1xyXG5pbXBvcnQgeyBTdGF0ZUNsYXNzIH0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcclxuXHJcbmludGVyZmFjZSBNdXRhdGVNZXRhT3B0aW9uczxUPiB7XHJcbiAgbWV0YTogTWV0YURhdGFNb2RlbDtcclxuICBpbmhlcml0ZWRTdGF0ZUNsYXNzOiBTdGF0ZUNsYXNzSW50ZXJuYWw7XHJcbiAgb3B0aW9uc1dpdGhJbmhlcml0YW5jZTogU3RvcmVPcHRpb25zPFQ+O1xyXG59XHJcblxyXG4vKipcclxuICogRGVjb3JhdGVzIGEgY2xhc3Mgd2l0aCBuZ3hzIHN0YXRlIGluZm9ybWF0aW9uLlxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIFN0YXRlPFQ+KG9wdGlvbnM6IFN0b3JlT3B0aW9uczxUPikge1xyXG4gIGZ1bmN0aW9uIGdldFN0YXRlT3B0aW9ucyhpbmhlcml0ZWRTdGF0ZUNsYXNzOiBTdGF0ZUNsYXNzSW50ZXJuYWwpOiBTdG9yZU9wdGlvbnM8VD4ge1xyXG4gICAgY29uc3QgaW5oZXJpdGFuY2VPcHRpb25zOiBQYXJ0aWFsPFN0b3JlT3B0aW9uczxUPj4gPVxyXG4gICAgICBpbmhlcml0ZWRTdGF0ZUNsYXNzW01FVEFfT1BUSU9OU19LRVldIHx8IHt9O1xyXG4gICAgcmV0dXJuIHsgLi4uaW5oZXJpdGFuY2VPcHRpb25zLCAuLi5vcHRpb25zIH0gYXMgU3RvcmVPcHRpb25zPFQ+O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbXV0YXRlTWV0YURhdGEocGFyYW1zOiBNdXRhdGVNZXRhT3B0aW9uczxUPik6IHZvaWQge1xyXG4gICAgY29uc3QgeyBtZXRhLCBpbmhlcml0ZWRTdGF0ZUNsYXNzLCBvcHRpb25zV2l0aEluaGVyaXRhbmNlIH0gPSBwYXJhbXM7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuLCBkZWZhdWx0cywgbmFtZSB9ID0gb3B0aW9uc1dpdGhJbmhlcml0YW5jZTtcclxuICAgIFN0b3JlVmFsaWRhdG9ycy5jaGVja0NvcnJlY3RTdGF0ZU5hbWUobmFtZSk7XHJcblxyXG4gICAgaWYgKGluaGVyaXRlZFN0YXRlQ2xhc3MuaGFzT3duUHJvcGVydHkoTUVUQV9LRVkpKSB7XHJcbiAgICAgIGNvbnN0IGluaGVyaXRlZE1ldGE6IFBhcnRpYWw8TWV0YURhdGFNb2RlbD4gPSBpbmhlcml0ZWRTdGF0ZUNsYXNzW01FVEFfS0VZXSB8fCB7fTtcclxuICAgICAgbWV0YS5hY3Rpb25zID0geyAuLi5tZXRhLmFjdGlvbnMsIC4uLmluaGVyaXRlZE1ldGEuYWN0aW9ucyB9O1xyXG4gICAgfVxyXG5cclxuICAgIG1ldGEuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgIG1ldGEuZGVmYXVsdHMgPSBkZWZhdWx0cztcclxuICAgIG1ldGEubmFtZSA9IG5hbWU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gKHRhcmdldDogU3RhdGVDbGFzcyk6IHZvaWQgPT4ge1xyXG4gICAgY29uc3Qgc3RhdGVDbGFzczogU3RhdGVDbGFzc0ludGVybmFsID0gdGFyZ2V0O1xyXG4gICAgY29uc3QgbWV0YTogTWV0YURhdGFNb2RlbCA9IGVuc3VyZVN0b3JlTWV0YWRhdGEoc3RhdGVDbGFzcyk7XHJcbiAgICBjb25zdCBpbmhlcml0ZWRTdGF0ZUNsYXNzOiBTdGF0ZUNsYXNzSW50ZXJuYWwgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc3RhdGVDbGFzcyk7XHJcbiAgICBjb25zdCBvcHRpb25zV2l0aEluaGVyaXRhbmNlOiBTdG9yZU9wdGlvbnM8VD4gPSBnZXRTdGF0ZU9wdGlvbnMoaW5oZXJpdGVkU3RhdGVDbGFzcyk7XHJcbiAgICBtdXRhdGVNZXRhRGF0YSh7IG1ldGEsIGluaGVyaXRlZFN0YXRlQ2xhc3MsIG9wdGlvbnNXaXRoSW5oZXJpdGFuY2UgfSk7XHJcbiAgICBzdGF0ZUNsYXNzW01FVEFfT1BUSU9OU19LRVldID0gb3B0aW9uc1dpdGhJbmhlcml0YW5jZTtcclxuICB9O1xyXG59XHJcbiJdfQ==