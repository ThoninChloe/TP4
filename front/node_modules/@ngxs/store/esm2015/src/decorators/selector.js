/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';
import { createSelector } from '../utils/selector-utils';
/**
 * Decorator for memoizing a state selector.
 * @param {?=} selectors
 * @return {?}
 */
export function Selector(selectors) {
    return (/**
     * @template T
     * @param {?} target
     * @param {?} key
     * @param {?} descriptor
     * @return {?}
     */
    (target, key, descriptor) => {
        /** @type {?} */
        const isNotMethod = !(descriptor && descriptor.value !== null);
        if (isNotMethod) {
            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());
        }
        /** @type {?} */
        const originalFn = descriptor.value;
        /** @type {?} */
        let memoizedFn = null;
        /** @type {?} */
        const newDescriptor = {
            configurable: true,
            /**
             * @return {?}
             */
            get() {
                // Selector initialisation deferred to here so that it is at runtime, not decorator parse time
                memoizedFn =
                    memoizedFn ||
                        createSelector(selectors, (/** @type {?} */ (originalFn)), {
                            containerClass: target,
                            selectorName: key.toString(),
                            /**
                             * @return {?}
                             */
                            getSelectorOptions() {
                                return {};
                            }
                        });
                return memoizedFn;
            }
        };
        // Add hidden property to descriptor
        ((/** @type {?} */ (newDescriptor)))['originalFn'] = originalFn;
        return newDescriptor;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3NlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBS3pELE1BQU0sVUFBVSxRQUFRLENBQUMsU0FBaUI7SUFDeEM7Ozs7Ozs7SUFBTyxDQUNMLE1BQVcsRUFDWCxHQUFvQixFQUNwQixVQUFzQyxFQUNILEVBQUU7O2NBQy9CLFdBQVcsR0FBRyxDQUFDLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDO1FBRTlELElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3hFOztjQUVLLFVBQVUsR0FBRyxVQUFVLENBQUMsS0FBSzs7WUFDL0IsVUFBVSxHQUFRLElBQUk7O2NBQ3BCLGFBQWEsR0FBRztZQUNwQixZQUFZLEVBQUUsSUFBSTs7OztZQUNsQixHQUFHO2dCQUNELDhGQUE4RjtnQkFDOUYsVUFBVTtvQkFDUixVQUFVO3dCQUNWLGNBQWMsQ0FDWixTQUFTLEVBQ1QsbUJBQUEsVUFBVSxFQUFPLEVBQ2pCOzRCQUNFLGNBQWMsRUFBRSxNQUFNOzRCQUN0QixZQUFZLEVBQUUsR0FBRyxDQUFDLFFBQVEsRUFBRTs7Ozs0QkFDNUIsa0JBQWtCO2dDQUNoQixPQUFPLEVBQUUsQ0FBQzs0QkFDWixDQUFDO3lCQUNGLENBQ0YsQ0FBQztnQkFDSixPQUFPLFVBQVUsQ0FBQztZQUNwQixDQUFDO1NBQ0Y7UUFDRCxvQ0FBb0M7UUFDcEMsQ0FBQyxtQkFBSyxhQUFhLEVBQUEsQ0FBQyxDQUFDLFlBQVksQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNoRCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDLEVBQUM7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ09ORklHX01FU1NBR0VTLCBWQUxJREFUSU9OX0NPREUgfSBmcm9tICcuLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcbmltcG9ydCB7IGNyZWF0ZVNlbGVjdG9yIH0gZnJvbSAnLi4vdXRpbHMvc2VsZWN0b3ItdXRpbHMnO1xyXG5cclxuLyoqXHJcbiAqIERlY29yYXRvciBmb3IgbWVtb2l6aW5nIGEgc3RhdGUgc2VsZWN0b3IuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gU2VsZWN0b3Ioc2VsZWN0b3JzPzogYW55W10pOiBNZXRob2REZWNvcmF0b3Ige1xyXG4gIHJldHVybiA8VD4oXHJcbiAgICB0YXJnZXQ6IGFueSxcclxuICAgIGtleTogc3RyaW5nIHwgc3ltYm9sLFxyXG4gICAgZGVzY3JpcHRvcjogVHlwZWRQcm9wZXJ0eURlc2NyaXB0b3I8VD5cclxuICApOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxUPiB8IHZvaWQgPT4ge1xyXG4gICAgY29uc3QgaXNOb3RNZXRob2QgPSAhKGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZSAhPT0gbnVsbCk7XHJcblxyXG4gICAgaWYgKGlzTm90TWV0aG9kKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihDT05GSUdfTUVTU0FHRVNbVkFMSURBVElPTl9DT0RFLlNFTEVDVE9SX0RFQ09SQVRPUl0oKSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgb3JpZ2luYWxGbiA9IGRlc2NyaXB0b3IudmFsdWU7XHJcbiAgICBsZXQgbWVtb2l6ZWRGbjogYW55ID0gbnVsbDtcclxuICAgIGNvbnN0IG5ld0Rlc2NyaXB0b3IgPSB7XHJcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgZ2V0KCkge1xyXG4gICAgICAgIC8vIFNlbGVjdG9yIGluaXRpYWxpc2F0aW9uIGRlZmVycmVkIHRvIGhlcmUgc28gdGhhdCBpdCBpcyBhdCBydW50aW1lLCBub3QgZGVjb3JhdG9yIHBhcnNlIHRpbWVcclxuICAgICAgICBtZW1vaXplZEZuID1cclxuICAgICAgICAgIG1lbW9pemVkRm4gfHxcclxuICAgICAgICAgIGNyZWF0ZVNlbGVjdG9yKFxyXG4gICAgICAgICAgICBzZWxlY3RvcnMsXHJcbiAgICAgICAgICAgIG9yaWdpbmFsRm4gYXMgYW55LFxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgY29udGFpbmVyQ2xhc3M6IHRhcmdldCxcclxuICAgICAgICAgICAgICBzZWxlY3Rvck5hbWU6IGtleS50b1N0cmluZygpLFxyXG4gICAgICAgICAgICAgIGdldFNlbGVjdG9yT3B0aW9ucygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgcmV0dXJuIG1lbW9pemVkRm47XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLyBBZGQgaGlkZGVuIHByb3BlcnR5IHRvIGRlc2NyaXB0b3JcclxuICAgICg8YW55Pm5ld0Rlc2NyaXB0b3IpWydvcmlnaW5hbEZuJ10gPSBvcmlnaW5hbEZuO1xyXG4gICAgcmV0dXJuIG5ld0Rlc2NyaXB0b3I7XHJcbiAgfTtcclxufVxyXG4iXX0=