/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgxsBootstrapper } from '@ngxs/store/internals';
import { filter, tap, mergeMap } from 'rxjs/operators';
import { StateContextFactory } from './state-context-factory';
import { InternalStateOperations } from './state-operations';
var LifecycleStateManager = /** @class */ (function () {
    function LifecycleStateManager(internalStateOperations, stateContextFactory, bootstrapper) {
        this.internalStateOperations = internalStateOperations;
        this.stateContextFactory = stateContextFactory;
        this.bootstrapper = bootstrapper;
    }
    /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    LifecycleStateManager.prototype.ngxsBootstrap = /**
     * @template T
     * @param {?} action
     * @param {?} results
     * @return {?}
     */
    function (action, results) {
        var _this = this;
        this.internalStateOperations
            .getRootStateOperations()
            .dispatch(action)
            .pipe(filter((/**
         * @return {?}
         */
        function () { return !!results; })), tap((/**
         * @return {?}
         */
        function () { return _this.invokeInit((/** @type {?} */ (results)).states); })), mergeMap((/**
         * @return {?}
         */
        function () { return _this.bootstrapper.appBootstrapped$; })), filter((/**
         * @param {?} appBootstrapped
         * @return {?}
         */
        function (appBootstrapped) { return !!appBootstrapped; })))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.invokeBootstrap((/** @type {?} */ (results)).states);
        }));
    };
    /**
     * Invoke the init function on the states.
     */
    /**
     * Invoke the init function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeInit = /**
     * Invoke the init function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    function (stateMetadatas) {
        this.invokeLifecycleHooks(stateMetadatas, "ngxsOnInit" /* NgxsOnInit */);
    };
    /**
     * Invoke the bootstrap function on the states.
     */
    /**
     * Invoke the bootstrap function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeBootstrap = /**
     * Invoke the bootstrap function on the states.
     * @param {?} stateMetadatas
     * @return {?}
     */
    function (stateMetadatas) {
        this.invokeLifecycleHooks(stateMetadatas, "ngxsAfterBootstrap" /* NgxsAfterBootstrap */);
    };
    /**
     * @private
     * @param {?} stateMetadatas
     * @param {?} hook
     * @return {?}
     */
    LifecycleStateManager.prototype.invokeLifecycleHooks = /**
     * @private
     * @param {?} stateMetadatas
     * @param {?} hook
     * @return {?}
     */
    function (stateMetadatas, hook) {
        var e_1, _a;
        try {
            for (var stateMetadatas_1 = tslib_1.__values(stateMetadatas), stateMetadatas_1_1 = stateMetadatas_1.next(); !stateMetadatas_1_1.done; stateMetadatas_1_1 = stateMetadatas_1.next()) {
                var metadata = stateMetadatas_1_1.value;
                /** @type {?} */
                var instance = metadata.instance;
                if (instance[hook]) {
                    /** @type {?} */
                    var stateContext = this.stateContextFactory.createStateContext(metadata);
                    (/** @type {?} */ (instance[hook]))(stateContext);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (stateMetadatas_1_1 && !stateMetadatas_1_1.done && (_a = stateMetadatas_1.return)) _a.call(stateMetadatas_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    LifecycleStateManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LifecycleStateManager.ctorParameters = function () { return [
        { type: InternalStateOperations },
        { type: StateContextFactory },
        { type: NgxsBootstrapper }
    ]; };
    return LifecycleStateManager;
}());
export { LifecycleStateManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.internalStateOperations;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.stateContextFactory;
    /**
     * @type {?}
     * @private
     */
    LifecycleStateManager.prototype.bootstrapper;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlmZWN5Y2xlLXN0YXRlLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9pbnRlcm5hbC9saWZlY3ljbGUtc3RhdGUtbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDekQsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFJN0Q7SUFFRSwrQkFDVSx1QkFBZ0QsRUFDaEQsbUJBQXdDLEVBQ3hDLFlBQThCO1FBRjlCLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7SUFDckMsQ0FBQzs7Ozs7OztJQUVKLDZDQUFhOzs7Ozs7SUFBYixVQUFpQixNQUFTLEVBQUUsT0FBc0M7UUFBbEUsaUJBYUM7UUFaQyxJQUFJLENBQUMsdUJBQXVCO2FBQ3pCLHNCQUFzQixFQUFFO2FBQ3hCLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDaEIsSUFBSSxDQUNILE1BQU07OztRQUFDLGNBQU0sT0FBQSxDQUFDLENBQUMsT0FBTyxFQUFULENBQVMsRUFBQyxFQUN2QixHQUFHOzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFVBQVUsQ0FBQyxtQkFBQSxPQUFPLEVBQUMsQ0FBQyxNQUFNLENBQUMsRUFBaEMsQ0FBZ0MsRUFBQyxFQUMzQyxRQUFROzs7UUFBQyxjQUFNLE9BQUEsS0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBbEMsQ0FBa0MsRUFBQyxFQUNsRCxNQUFNOzs7O1FBQUMsVUFBQSxlQUFlLElBQUksT0FBQSxDQUFDLENBQUMsZUFBZSxFQUFqQixDQUFpQixFQUFDLENBQzdDO2FBQ0EsU0FBUzs7O1FBQUM7WUFDVCxLQUFJLENBQUMsZUFBZSxDQUFDLG1CQUFBLE9BQU8sRUFBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCwwQ0FBVTs7Ozs7SUFBVixVQUFXLGNBQTZCO1FBQ3RDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxjQUFjLGdDQUE0QixDQUFDO0lBQ3ZFLENBQUM7SUFFRDs7T0FFRzs7Ozs7O0lBQ0gsK0NBQWU7Ozs7O0lBQWYsVUFBZ0IsY0FBNkI7UUFDM0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWMsZ0RBQW9DLENBQUM7SUFDL0UsQ0FBQzs7Ozs7OztJQUVPLG9EQUFvQjs7Ozs7O0lBQTVCLFVBQTZCLGNBQTZCLEVBQUUsSUFBb0I7OztZQUM5RSxLQUF1QixJQUFBLG1CQUFBLGlCQUFBLGNBQWMsQ0FBQSw4Q0FBQSwwRUFBRTtnQkFBbEMsSUFBTSxRQUFRLDJCQUFBOztvQkFDWCxRQUFRLEdBQWtCLFFBQVEsQ0FBQyxRQUFRO2dCQUVqRCxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTs7d0JBQ1osWUFBWSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUM7b0JBQzFFLG1CQUFBLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFDLFlBQVksQ0FBQyxDQUFDO2lCQUMvQjthQUNGOzs7Ozs7Ozs7SUFDSCxDQUFDOztnQkE5Q0YsVUFBVTs7OztnQkFKRix1QkFBdUI7Z0JBRHZCLG1CQUFtQjtnQkFIbkIsZ0JBQWdCOztJQXVEekIsNEJBQUM7Q0FBQSxBQS9DRCxJQStDQztTQTlDWSxxQkFBcUI7Ozs7OztJQUU5Qix3REFBd0Q7Ozs7O0lBQ3hELG9EQUFnRDs7Ozs7SUFDaEQsNkNBQXNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOZ3hzQm9vdHN0cmFwcGVyIH0gZnJvbSAnQG5neHMvc3RvcmUvaW50ZXJuYWxzJztcclxuaW1wb3J0IHsgZmlsdGVyLCB0YXAsIG1lcmdlTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuaW1wb3J0IHsgU3RhdGVDb250ZXh0RmFjdG9yeSB9IGZyb20gJy4vc3RhdGUtY29udGV4dC1mYWN0b3J5JztcclxuaW1wb3J0IHsgSW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnMgfSBmcm9tICcuL3N0YXRlLW9wZXJhdGlvbnMnO1xyXG5pbXBvcnQgeyBNYXBwZWRTdG9yZSwgU3RhdGVzQW5kRGVmYXVsdHMgfSBmcm9tICcuL2ludGVybmFscyc7XHJcbmltcG9ydCB7IExpZmVjeWNsZUhvb2tzLCBOZ3hzTGlmZUN5Y2xlIH0gZnJvbSAnLi4vc3ltYm9scyc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBMaWZlY3ljbGVTdGF0ZU1hbmFnZXIge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBpbnRlcm5hbFN0YXRlT3BlcmF0aW9uczogSW50ZXJuYWxTdGF0ZU9wZXJhdGlvbnMsXHJcbiAgICBwcml2YXRlIHN0YXRlQ29udGV4dEZhY3Rvcnk6IFN0YXRlQ29udGV4dEZhY3RvcnksXHJcbiAgICBwcml2YXRlIGJvb3RzdHJhcHBlcjogTmd4c0Jvb3RzdHJhcHBlclxyXG4gICkge31cclxuXHJcbiAgbmd4c0Jvb3RzdHJhcDxUPihhY3Rpb246IFQsIHJlc3VsdHM6IFN0YXRlc0FuZERlZmF1bHRzIHwgdW5kZWZpbmVkKTogdm9pZCB7XHJcbiAgICB0aGlzLmludGVybmFsU3RhdGVPcGVyYXRpb25zXHJcbiAgICAgIC5nZXRSb290U3RhdGVPcGVyYXRpb25zKClcclxuICAgICAgLmRpc3BhdGNoKGFjdGlvbilcclxuICAgICAgLnBpcGUoXHJcbiAgICAgICAgZmlsdGVyKCgpID0+ICEhcmVzdWx0cyksXHJcbiAgICAgICAgdGFwKCgpID0+IHRoaXMuaW52b2tlSW5pdChyZXN1bHRzIS5zdGF0ZXMpKSxcclxuICAgICAgICBtZXJnZU1hcCgoKSA9PiB0aGlzLmJvb3RzdHJhcHBlci5hcHBCb290c3RyYXBwZWQkKSxcclxuICAgICAgICBmaWx0ZXIoYXBwQm9vdHN0cmFwcGVkID0+ICEhYXBwQm9vdHN0cmFwcGVkKVxyXG4gICAgICApXHJcbiAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuaW52b2tlQm9vdHN0cmFwKHJlc3VsdHMhLnN0YXRlcyk7XHJcbiAgICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW52b2tlIHRoZSBpbml0IGZ1bmN0aW9uIG9uIHRoZSBzdGF0ZXMuXHJcbiAgICovXHJcbiAgaW52b2tlSW5pdChzdGF0ZU1ldGFkYXRhczogTWFwcGVkU3RvcmVbXSk6IHZvaWQge1xyXG4gICAgdGhpcy5pbnZva2VMaWZlY3ljbGVIb29rcyhzdGF0ZU1ldGFkYXRhcywgTGlmZWN5Y2xlSG9va3MuTmd4c09uSW5pdCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbnZva2UgdGhlIGJvb3RzdHJhcCBmdW5jdGlvbiBvbiB0aGUgc3RhdGVzLlxyXG4gICAqL1xyXG4gIGludm9rZUJvb3RzdHJhcChzdGF0ZU1ldGFkYXRhczogTWFwcGVkU3RvcmVbXSkge1xyXG4gICAgdGhpcy5pbnZva2VMaWZlY3ljbGVIb29rcyhzdGF0ZU1ldGFkYXRhcywgTGlmZWN5Y2xlSG9va3MuTmd4c0FmdGVyQm9vdHN0cmFwKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaW52b2tlTGlmZWN5Y2xlSG9va3Moc3RhdGVNZXRhZGF0YXM6IE1hcHBlZFN0b3JlW10sIGhvb2s6IExpZmVjeWNsZUhvb2tzKTogdm9pZCB7XHJcbiAgICBmb3IgKGNvbnN0IG1ldGFkYXRhIG9mIHN0YXRlTWV0YWRhdGFzKSB7XHJcbiAgICAgIGNvbnN0IGluc3RhbmNlOiBOZ3hzTGlmZUN5Y2xlID0gbWV0YWRhdGEuaW5zdGFuY2U7XHJcblxyXG4gICAgICBpZiAoaW5zdGFuY2VbaG9va10pIHtcclxuICAgICAgICBjb25zdCBzdGF0ZUNvbnRleHQgPSB0aGlzLnN0YXRlQ29udGV4dEZhY3RvcnkuY3JlYXRlU3RhdGVDb250ZXh0KG1ldGFkYXRhKTtcclxuICAgICAgICBpbnN0YW5jZVtob29rXSEoc3RhdGVDb250ZXh0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=