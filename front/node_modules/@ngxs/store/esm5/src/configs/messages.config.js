var _a;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var VALIDATION_CODE = {
    STATE_NAME: 'STATE_NAME',
    STATE_UNIQUE: 'STATE_UNIQUE',
    STATE_NAME_PROPERTY: 'STATE_NAME_PROPERTY',
    STATE_DECORATOR: 'STATE_DECORATOR',
    INCORRECT_PRODUCTION: 'INCORRECT_PRODUCTION',
    INCORRECT_DEVELOPMENT: 'INCORRECT_DEVELOPMENT',
    SELECT_FACTORY_NOT_CONNECTED: 'SELECT_FACTORY_NOT_CONNECTED',
    ACTION_DECORATOR: 'ACTION_DECORATOR',
    SELECTOR_DECORATOR: 'SELECTOR_DECORATOR',
};
export { VALIDATION_CODE };
/** @type {?} */
export var CONFIG_MESSAGES = (_a = {},
    _a[VALIDATION_CODE.STATE_NAME] = (/**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return name + " is not a valid state name. It needs to be a valid object property name.";
    }),
    _a[VALIDATION_CODE.STATE_NAME_PROPERTY] = (/**
     * @return {?}
     */
    function () { return "States must register a 'name' property"; }),
    _a[VALIDATION_CODE.STATE_UNIQUE] = (/**
     * @param {?} current
     * @param {?} newName
     * @param {?} oldName
     * @return {?}
     */
    function (current, newName, oldName) {
        return "State name '" + current + "' from " + newName + " already exists in " + oldName;
    }),
    _a[VALIDATION_CODE.STATE_DECORATOR] = (/**
     * @return {?}
     */
    function () { return 'States must be decorated with @State() decorator'; }),
    _a[VALIDATION_CODE.INCORRECT_PRODUCTION] = (/**
     * @return {?}
     */
    function () {
        return 'Angular is running in production mode but NGXS is still running in the development mode!\n' +
            'Please set developmentMode to false on the NgxsModule options when in production mode.\n' +
            'NgxsModule.forRoot(states, { developmentMode: !environment.production })';
    }),
    _a[VALIDATION_CODE.INCORRECT_DEVELOPMENT] = (/**
     * @return {?}
     */
    function () {
        return 'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\n' +
            'NgxsModule.forRoot(states, { developmentMode: !environment.production })';
    }),
    _a[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED] = (/**
     * @return {?}
     */
    function () {
        return 'SelectFactory not connected to store!';
    }),
    _a[VALIDATION_CODE.ACTION_DECORATOR] = (/**
     * @return {?}
     */
    function () {
        return '@Action() decorator cannot be used with static methods';
    }),
    _a[VALIDATION_CODE.SELECTOR_DECORATOR] = (/**
     * @return {?}
     */
    function () { return 'Selectors only work on methods'; }),
    _a);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVzc2FnZXMuY29uZmlnLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neHMvc3RvcmUvIiwic291cmNlcyI6WyJzcmMvY29uZmlncy9tZXNzYWdlcy5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztJQUdFLFlBQWEsWUFBWTtJQUN6QixjQUFlLGNBQWM7SUFDN0IscUJBQXNCLHFCQUFxQjtJQUMzQyxpQkFBa0IsaUJBQWlCO0lBQ25DLHNCQUF1QixzQkFBc0I7SUFDN0MsdUJBQXdCLHVCQUF1QjtJQUMvQyw4QkFBK0IsOEJBQThCO0lBQzdELGtCQUFtQixrQkFBa0I7SUFDckMsb0JBQXFCLG9CQUFvQjs7OztBQUczQyxNQUFNLEtBQU8sZUFBZTtJQUMxQixHQUFDLGVBQWUsQ0FBQyxVQUFVOzs7O0lBQUcsVUFBQyxJQUFZO1FBQ3pDLE9BQUcsSUFBSSw2RUFBMEU7SUFBakYsQ0FBaUYsQ0FBQTtJQUNuRixHQUFDLGVBQWUsQ0FBQyxtQkFBbUI7OztJQUFHLGNBQU0sT0FBQSx3Q0FBd0MsRUFBeEMsQ0FBd0MsQ0FBQTtJQUNyRixHQUFDLGVBQWUsQ0FBQyxZQUFZOzs7Ozs7SUFBRyxVQUFDLE9BQWUsRUFBRSxPQUFlLEVBQUUsT0FBZTtRQUNoRixPQUFBLGlCQUFlLE9BQU8sZUFBVSxPQUFPLDJCQUFzQixPQUFTO0lBQXRFLENBQXNFLENBQUE7SUFDeEUsR0FBQyxlQUFlLENBQUMsZUFBZTs7O0lBQUcsY0FBTSxPQUFBLGtEQUFrRCxFQUFsRCxDQUFrRCxDQUFBO0lBQzNGLEdBQUMsZUFBZSxDQUFDLG9CQUFvQjs7O0lBQUc7UUFDdEMsT0FBQSw0RkFBNEY7WUFDNUYsMEZBQTBGO1lBQzFGLDBFQUEwRTtJQUYxRSxDQUUwRSxDQUFBO0lBQzVFLEdBQUMsZUFBZSxDQUFDLHFCQUFxQjs7O0lBQUc7UUFDdkMsT0FBQSw4R0FBOEc7WUFDOUcsMEVBQTBFO0lBRDFFLENBQzBFLENBQUE7SUFDNUUsR0FBQyxlQUFlLENBQUMsNEJBQTRCOzs7SUFBRztRQUM5QyxPQUFBLHVDQUF1QztJQUF2QyxDQUF1QyxDQUFBO0lBQ3pDLEdBQUMsZUFBZSxDQUFDLGdCQUFnQjs7O0lBQUc7UUFDbEMsT0FBQSx3REFBd0Q7SUFBeEQsQ0FBd0QsQ0FBQTtJQUMxRCxHQUFDLGVBQWUsQ0FBQyxrQkFBa0I7OztJQUFHLGNBQU0sT0FBQSxnQ0FBZ0MsRUFBaEMsQ0FBZ0MsQ0FBQTtPQUM3RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9iamVjdEtleU1hcCB9IGZyb20gJ0BuZ3hzL3N0b3JlL2ludGVybmFscyc7XHJcblxyXG5leHBvcnQgZW51bSBWQUxJREFUSU9OX0NPREUge1xyXG4gIFNUQVRFX05BTUUgPSAnU1RBVEVfTkFNRScsXHJcbiAgU1RBVEVfVU5JUVVFID0gJ1NUQVRFX1VOSVFVRScsXHJcbiAgU1RBVEVfTkFNRV9QUk9QRVJUWSA9ICdTVEFURV9OQU1FX1BST1BFUlRZJyxcclxuICBTVEFURV9ERUNPUkFUT1IgPSAnU1RBVEVfREVDT1JBVE9SJyxcclxuICBJTkNPUlJFQ1RfUFJPRFVDVElPTiA9ICdJTkNPUlJFQ1RfUFJPRFVDVElPTicsXHJcbiAgSU5DT1JSRUNUX0RFVkVMT1BNRU5UID0gJ0lOQ09SUkVDVF9ERVZFTE9QTUVOVCcsXHJcbiAgU0VMRUNUX0ZBQ1RPUllfTk9UX0NPTk5FQ1RFRCA9ICdTRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEJyxcclxuICBBQ1RJT05fREVDT1JBVE9SID0gJ0FDVElPTl9ERUNPUkFUT1InLFxyXG4gIFNFTEVDVE9SX0RFQ09SQVRPUiA9ICdTRUxFQ1RPUl9ERUNPUkFUT1InXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBDT05GSUdfTUVTU0FHRVM6IE9iamVjdEtleU1hcDxGdW5jdGlvbj4gPSB7XHJcbiAgW1ZBTElEQVRJT05fQ09ERS5TVEFURV9OQU1FXTogKG5hbWU6IHN0cmluZykgPT5cclxuICAgIGAke25hbWV9IGlzIG5vdCBhIHZhbGlkIHN0YXRlIG5hbWUuIEl0IG5lZWRzIHRvIGJlIGEgdmFsaWQgb2JqZWN0IHByb3BlcnR5IG5hbWUuYCxcclxuICBbVkFMSURBVElPTl9DT0RFLlNUQVRFX05BTUVfUFJPUEVSVFldOiAoKSA9PiBgU3RhdGVzIG11c3QgcmVnaXN0ZXIgYSAnbmFtZScgcHJvcGVydHlgLFxyXG4gIFtWQUxJREFUSU9OX0NPREUuU1RBVEVfVU5JUVVFXTogKGN1cnJlbnQ6IHN0cmluZywgbmV3TmFtZTogc3RyaW5nLCBvbGROYW1lOiBzdHJpbmcpID0+XHJcbiAgICBgU3RhdGUgbmFtZSAnJHtjdXJyZW50fScgZnJvbSAke25ld05hbWV9IGFscmVhZHkgZXhpc3RzIGluICR7b2xkTmFtZX1gLFxyXG4gIFtWQUxJREFUSU9OX0NPREUuU1RBVEVfREVDT1JBVE9SXTogKCkgPT4gJ1N0YXRlcyBtdXN0IGJlIGRlY29yYXRlZCB3aXRoIEBTdGF0ZSgpIGRlY29yYXRvcicsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5JTkNPUlJFQ1RfUFJPRFVDVElPTl06ICgpID0+XHJcbiAgICAnQW5ndWxhciBpcyBydW5uaW5nIGluIHByb2R1Y3Rpb24gbW9kZSBidXQgTkdYUyBpcyBzdGlsbCBydW5uaW5nIGluIHRoZSBkZXZlbG9wbWVudCBtb2RlIVxcbicgK1xyXG4gICAgJ1BsZWFzZSBzZXQgZGV2ZWxvcG1lbnRNb2RlIHRvIGZhbHNlIG9uIHRoZSBOZ3hzTW9kdWxlIG9wdGlvbnMgd2hlbiBpbiBwcm9kdWN0aW9uIG1vZGUuXFxuJyArXHJcbiAgICAnTmd4c01vZHVsZS5mb3JSb290KHN0YXRlcywgeyBkZXZlbG9wbWVudE1vZGU6ICFlbnZpcm9ubWVudC5wcm9kdWN0aW9uIH0pJyxcclxuICBbVkFMSURBVElPTl9DT0RFLklOQ09SUkVDVF9ERVZFTE9QTUVOVF06ICgpID0+XHJcbiAgICAnUkVDT01NRU5EQVRJT046IFNldCBkZXZlbG9wbWVudE1vZGUgdG8gdHJ1ZSBvbiB0aGUgTmd4c01vZHVsZSB3aGVuIEFuZ3VsYXIgaXMgcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlLlxcbicgK1xyXG4gICAgJ05neHNNb2R1bGUuZm9yUm9vdChzdGF0ZXMsIHsgZGV2ZWxvcG1lbnRNb2RlOiAhZW52aXJvbm1lbnQucHJvZHVjdGlvbiB9KScsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RfRkFDVE9SWV9OT1RfQ09OTkVDVEVEXTogKCkgPT5cclxuICAgICdTZWxlY3RGYWN0b3J5IG5vdCBjb25uZWN0ZWQgdG8gc3RvcmUhJyxcclxuICBbVkFMSURBVElPTl9DT0RFLkFDVElPTl9ERUNPUkFUT1JdOiAoKSA9PlxyXG4gICAgJ0BBY3Rpb24oKSBkZWNvcmF0b3IgY2Fubm90IGJlIHVzZWQgd2l0aCBzdGF0aWMgbWV0aG9kcycsXHJcbiAgW1ZBTElEQVRJT05fQ09ERS5TRUxFQ1RPUl9ERUNPUkFUT1JdOiAoKSA9PiAnU2VsZWN0b3JzIG9ubHkgd29yayBvbiBtZXRob2RzJ1xyXG59O1xyXG4iXX0=