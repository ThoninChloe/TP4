/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';
import { createSelector } from '../utils/selector-utils';
/**
 * Decorator for memoizing a state selector.
 * @param {?=} selectors
 * @return {?}
 */
export function Selector(selectors) {
    return (/**
     * @template T
     * @param {?} target
     * @param {?} key
     * @param {?} descriptor
     * @return {?}
     */
    function (target, key, descriptor) {
        /** @type {?} */
        var isNotMethod = !(descriptor && descriptor.value !== null);
        if (isNotMethod) {
            throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());
        }
        /** @type {?} */
        var originalFn = descriptor.value;
        /** @type {?} */
        var memoizedFn = null;
        /** @type {?} */
        var newDescriptor = {
            configurable: true,
            get: /**
             * @return {?}
             */
            function () {
                // Selector initialisation deferred to here so that it is at runtime, not decorator parse time
                memoizedFn =
                    memoizedFn ||
                        createSelector(selectors, (/** @type {?} */ (originalFn)), {
                            containerClass: target,
                            selectorName: key.toString(),
                            getSelectorOptions: /**
                             * @return {?}
                             */
                            function () {
                                return {};
                            }
                        });
                return memoizedFn;
            }
        };
        // Add hidden property to descriptor
        ((/** @type {?} */ (newDescriptor)))['originalFn'] = originalFn;
        return newDescriptor;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9kZWNvcmF0b3JzL3NlbGVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLGVBQWUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzlFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7Ozs7O0FBS3pELE1BQU0sVUFBVSxRQUFRLENBQUMsU0FBaUI7SUFDeEM7Ozs7Ozs7SUFBTyxVQUNMLE1BQVcsRUFDWCxHQUFvQixFQUNwQixVQUFzQzs7WUFFaEMsV0FBVyxHQUFHLENBQUMsQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7UUFFOUQsSUFBSSxXQUFXLEVBQUU7WUFDZixNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxlQUFlLENBQUMsa0JBQWtCLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDeEU7O1lBRUssVUFBVSxHQUFHLFVBQVUsQ0FBQyxLQUFLOztZQUMvQixVQUFVLEdBQVEsSUFBSTs7WUFDcEIsYUFBYSxHQUFHO1lBQ3BCLFlBQVksRUFBRSxJQUFJO1lBQ2xCLEdBQUc7Ozs7Z0JBQ0QsOEZBQThGO2dCQUM5RixVQUFVO29CQUNSLFVBQVU7d0JBQ1YsY0FBYyxDQUNaLFNBQVMsRUFDVCxtQkFBQSxVQUFVLEVBQU8sRUFDakI7NEJBQ0UsY0FBYyxFQUFFLE1BQU07NEJBQ3RCLFlBQVksRUFBRSxHQUFHLENBQUMsUUFBUSxFQUFFOzRCQUM1QixrQkFBa0I7Ozs7Z0NBQ2hCLE9BQU8sRUFBRSxDQUFDOzRCQUNaLENBQUM7eUJBQ0YsQ0FDRixDQUFDO2dCQUNKLE9BQU8sVUFBVSxDQUFDO1lBQ3BCLENBQUM7U0FDRjtRQUNELG9DQUFvQztRQUNwQyxDQUFDLG1CQUFLLGFBQWEsRUFBQSxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsVUFBVSxDQUFDO1FBQ2hELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUMsRUFBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT05GSUdfTUVTU0FHRVMsIFZBTElEQVRJT05fQ09ERSB9IGZyb20gJy4uL2NvbmZpZ3MvbWVzc2FnZXMuY29uZmlnJztcclxuaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IgfSBmcm9tICcuLi91dGlscy9zZWxlY3Rvci11dGlscyc7XHJcblxyXG4vKipcclxuICogRGVjb3JhdG9yIGZvciBtZW1vaXppbmcgYSBzdGF0ZSBzZWxlY3Rvci5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3RvcihzZWxlY3RvcnM/OiBhbnlbXSk6IE1ldGhvZERlY29yYXRvciB7XHJcbiAgcmV0dXJuIDxUPihcclxuICAgIHRhcmdldDogYW55LFxyXG4gICAga2V5OiBzdHJpbmcgfCBzeW1ib2wsXHJcbiAgICBkZXNjcmlwdG9yOiBUeXBlZFByb3BlcnR5RGVzY3JpcHRvcjxUPlxyXG4gICk6IFR5cGVkUHJvcGVydHlEZXNjcmlwdG9yPFQ+IHwgdm9pZCA9PiB7XHJcbiAgICBjb25zdCBpc05vdE1ldGhvZCA9ICEoZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlICE9PSBudWxsKTtcclxuXHJcbiAgICBpZiAoaXNOb3RNZXRob2QpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKENPTkZJR19NRVNTQUdFU1tWQUxJREFUSU9OX0NPREUuU0VMRUNUT1JfREVDT1JBVE9SXSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcmlnaW5hbEZuID0gZGVzY3JpcHRvci52YWx1ZTtcclxuICAgIGxldCBtZW1vaXplZEZuOiBhbnkgPSBudWxsO1xyXG4gICAgY29uc3QgbmV3RGVzY3JpcHRvciA9IHtcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICBnZXQoKSB7XHJcbiAgICAgICAgLy8gU2VsZWN0b3IgaW5pdGlhbGlzYXRpb24gZGVmZXJyZWQgdG8gaGVyZSBzbyB0aGF0IGl0IGlzIGF0IHJ1bnRpbWUsIG5vdCBkZWNvcmF0b3IgcGFyc2UgdGltZVxyXG4gICAgICAgIG1lbW9pemVkRm4gPVxyXG4gICAgICAgICAgbWVtb2l6ZWRGbiB8fFxyXG4gICAgICAgICAgY3JlYXRlU2VsZWN0b3IoXHJcbiAgICAgICAgICAgIHNlbGVjdG9ycyxcclxuICAgICAgICAgICAgb3JpZ2luYWxGbiBhcyBhbnksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICBjb250YWluZXJDbGFzczogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgIHNlbGVjdG9yTmFtZToga2V5LnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgZ2V0U2VsZWN0b3JPcHRpb25zKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICByZXR1cm4gbWVtb2l6ZWRGbjtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vIEFkZCBoaWRkZW4gcHJvcGVydHkgdG8gZGVzY3JpcHRvclxyXG4gICAgKDxhbnk+bmV3RGVzY3JpcHRvcilbJ29yaWdpbmFsRm4nXSA9IG9yaWdpbmFsRm47XHJcbiAgICByZXR1cm4gbmV3RGVzY3JpcHRvcjtcclxuICB9O1xyXG59XHJcbiJdfQ==