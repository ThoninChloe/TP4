/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getStoreMetadata } from '../internal/internals';
import { CONFIG_MESSAGES as MESSAGES, VALIDATION_CODE as CODE } from '../configs/messages.config';
/**
 * @abstract
 */
var StoreValidators = /** @class */ (function () {
    function StoreValidators() {
    }
    /**
     * @param {?} name
     * @return {?}
     */
    StoreValidators.stateNameErrorMessage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return MESSAGES[CODE.STATE_NAME](name);
    };
    /**
     * @param {?} name
     * @return {?}
     */
    StoreValidators.checkCorrectStateName = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!name) {
            throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());
        }
        if (!this.stateNameRegex.test(name)) {
            throw new Error(this.stateNameErrorMessage(name));
        }
    };
    /**
     * @param {?} state
     * @param {?} statesByName
     * @return {?}
     */
    StoreValidators.checkStateNameIsUnique = /**
     * @param {?} state
     * @param {?} statesByName
     * @return {?}
     */
    function (state, statesByName) {
        /** @type {?} */
        var meta = this.getValidStateMeta(state);
        /** @type {?} */
        var stateName = (/** @type {?} */ ((/** @type {?} */ (meta)).name));
        /** @type {?} */
        var existingState = statesByName[stateName];
        if (existingState && existingState !== state) {
            throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));
        }
        return stateName;
    };
    /**
     * @param {?} state
     * @return {?}
     */
    StoreValidators.getValidStateMeta = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        /** @type {?} */
        var meta = getStoreMetadata(state);
        if (!meta) {
            throw new Error(MESSAGES[CODE.STATE_DECORATOR]());
        }
        return meta;
    };
    StoreValidators.stateNameRegex = new RegExp('^[a-zA-Z0-9_]+$');
    return StoreValidators;
}());
export { StoreValidators };
if (false) {
    /** @type {?} */
    StoreValidators.stateNameRegex;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3hzL3N0b3JlLyIsInNvdXJjZXMiOlsic3JjL3V0aWxzL3N0b3JlLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDTCxnQkFBZ0IsRUFJakIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQ0wsZUFBZSxJQUFJLFFBQVEsRUFDM0IsZUFBZSxJQUFJLElBQUksRUFDeEIsTUFBTSw0QkFBNEIsQ0FBQzs7OztBQUVwQztJQUFBO0lBc0NBLENBQUM7Ozs7O0lBbkNlLHFDQUFxQjs7OztJQUFuQyxVQUFvQyxJQUFZO1FBQzlDLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDOzs7OztJQUVhLHFDQUFxQjs7OztJQUFuQyxVQUFvQyxJQUFZO1FBQzlDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDVCxNQUFNLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDdkQ7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUNuRDtJQUNILENBQUM7Ozs7OztJQUVhLHNDQUFzQjs7Ozs7SUFBcEMsVUFDRSxLQUF5QixFQUN6QixZQUEwQjs7WUFFcEIsSUFBSSxHQUFrQixJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDOztZQUNuRCxTQUFTLEdBQVcsbUJBQUEsbUJBQUEsSUFBSSxFQUFDLENBQUMsSUFBSSxFQUFVOztZQUN4QyxhQUFhLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUM3QyxJQUFJLGFBQWEsSUFBSSxhQUFhLEtBQUssS0FBSyxFQUFFO1lBQzVDLE1BQU0sSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUN6RjtRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Ozs7O0lBRWEsaUNBQWlCOzs7O0lBQS9CLFVBQWdDLEtBQXlCOztZQUNqRCxJQUFJLEdBQWtCLGdCQUFnQixDQUFDLEtBQUssQ0FBQztRQUNuRCxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuRDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQXBDYSw4QkFBYyxHQUFXLElBQUksTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFxQ3ZFLHNCQUFDO0NBQUEsQUF0Q0QsSUFzQ0M7U0F0Q3FCLGVBQWU7OztJQUNuQywrQkFBcUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIGdldFN0b3JlTWV0YWRhdGEsXHJcbiAgTWV0YURhdGFNb2RlbCxcclxuICBTdGF0ZUNsYXNzSW50ZXJuYWwsXHJcbiAgU3RhdGVzQnlOYW1lXHJcbn0gZnJvbSAnLi4vaW50ZXJuYWwvaW50ZXJuYWxzJztcclxuaW1wb3J0IHtcclxuICBDT05GSUdfTUVTU0FHRVMgYXMgTUVTU0FHRVMsXHJcbiAgVkFMSURBVElPTl9DT0RFIGFzIENPREVcclxufSBmcm9tICcuLi9jb25maWdzL21lc3NhZ2VzLmNvbmZpZyc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU3RvcmVWYWxpZGF0b3JzIHtcclxuICBwdWJsaWMgc3RhdGljIHN0YXRlTmFtZVJlZ2V4OiBSZWdFeHAgPSBuZXcgUmVnRXhwKCdeW2EtekEtWjAtOV9dKyQnKTtcclxuXHJcbiAgcHVibGljIHN0YXRpYyBzdGF0ZU5hbWVFcnJvck1lc3NhZ2UobmFtZTogc3RyaW5nKSB7XHJcbiAgICByZXR1cm4gTUVTU0FHRVNbQ09ERS5TVEFURV9OQU1FXShuYW1lKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgY2hlY2tDb3JyZWN0U3RhdGVOYW1lKG5hbWU6IHN0cmluZykge1xyXG4gICAgaWYgKCFuYW1lKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihNRVNTQUdFU1tDT0RFLlNUQVRFX05BTUVfUFJPUEVSVFldKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5zdGF0ZU5hbWVSZWdleC50ZXN0KG5hbWUpKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcih0aGlzLnN0YXRlTmFtZUVycm9yTWVzc2FnZShuYW1lKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNoZWNrU3RhdGVOYW1lSXNVbmlxdWUoXHJcbiAgICBzdGF0ZTogU3RhdGVDbGFzc0ludGVybmFsLFxyXG4gICAgc3RhdGVzQnlOYW1lOiBTdGF0ZXNCeU5hbWVcclxuICApOiBzdHJpbmcge1xyXG4gICAgY29uc3QgbWV0YTogTWV0YURhdGFNb2RlbCA9IHRoaXMuZ2V0VmFsaWRTdGF0ZU1ldGEoc3RhdGUpO1xyXG4gICAgY29uc3Qgc3RhdGVOYW1lOiBzdHJpbmcgPSBtZXRhIS5uYW1lIGFzIHN0cmluZztcclxuICAgIGNvbnN0IGV4aXN0aW5nU3RhdGUgPSBzdGF0ZXNCeU5hbWVbc3RhdGVOYW1lXTtcclxuICAgIGlmIChleGlzdGluZ1N0YXRlICYmIGV4aXN0aW5nU3RhdGUgIT09IHN0YXRlKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihNRVNTQUdFU1tDT0RFLlNUQVRFX1VOSVFVRV0oc3RhdGVOYW1lLCBzdGF0ZS5uYW1lLCBleGlzdGluZ1N0YXRlLm5hbWUpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBzdGF0ZU5hbWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldFZhbGlkU3RhdGVNZXRhKHN0YXRlOiBTdGF0ZUNsYXNzSW50ZXJuYWwpOiBNZXRhRGF0YU1vZGVsIHtcclxuICAgIGNvbnN0IG1ldGE6IE1ldGFEYXRhTW9kZWwgPSBnZXRTdG9yZU1ldGFkYXRhKHN0YXRlKTtcclxuICAgIGlmICghbWV0YSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoTUVTU0FHRVNbQ09ERS5TVEFURV9ERUNPUkFUT1JdKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtZXRhO1xyXG4gIH1cclxufVxyXG4iXX0=