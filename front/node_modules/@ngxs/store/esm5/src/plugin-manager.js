/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';
import { NGXS_PLUGINS } from './symbols';
/**
 * Plugin manager class
 * @ignore
 */
var PluginManager = /** @class */ (function () {
    function PluginManager(_parentManager, _pluginHandlers) {
        this._parentManager = _parentManager;
        this._pluginHandlers = _pluginHandlers;
        this.plugins = [];
        this.registerHandlers();
    }
    /**
     * @private
     * @return {?}
     */
    PluginManager.prototype.registerHandlers = /**
     * @private
     * @return {?}
     */
    function () {
        this.plugins = this.getPlugins();
        this.registerPluginInManager(this.plugins);
    };
    /**
     * @private
     * @param {?} plugins
     * @return {?}
     */
    PluginManager.prototype.registerPluginInManager = /**
     * @private
     * @param {?} plugins
     * @return {?}
     */
    function (plugins) {
        var _a;
        if (this._parentManager) {
            (_a = this._parentManager.plugins).push.apply(_a, tslib_1.__spread(plugins));
        }
    };
    /**
     * @private
     * @return {?}
     */
    PluginManager.prototype.getPlugins = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var handlers = this._pluginHandlers || [];
        return handlers.map((/**
         * @param {?} plugin
         * @return {?}
         */
        function (plugin) { return (/** @type {?} */ ((plugin.handle ? plugin.handle.bind(plugin) : plugin))); }));
    };
    PluginManager.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PluginManager.ctorParameters = function () { return [
        { type: PluginManager, decorators: [{ type: Optional }, { type: SkipSelf }] },
        { type: Array, decorators: [{ type: Inject, args: [NGXS_PLUGINS,] }, { type: Optional }] }
    ]; };
    return PluginManager;
}());
export { PluginManager };
if (false) {
    /** @type {?} */
    PluginManager.prototype.plugins;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._parentManager;
    /**
     * @type {?}
     * @private
     */
    PluginManager.prototype._pluginHandlers;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx1Z2luLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Abmd4cy9zdG9yZS8iLCJzb3VyY2VzIjpbInNyYy9wbHVnaW4tbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdkUsT0FBTyxFQUFnQixZQUFZLEVBQWMsTUFBTSxXQUFXLENBQUM7Ozs7O0FBTW5FO0lBSUUsdUJBR1UsY0FBNkIsRUFHN0IsZUFBNkI7UUFIN0IsbUJBQWMsR0FBZCxjQUFjLENBQWU7UUFHN0Isb0JBQWUsR0FBZixlQUFlLENBQWM7UUFSaEMsWUFBTyxHQUFtQixFQUFFLENBQUM7UUFVbEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFTyx3Q0FBZ0I7Ozs7SUFBeEI7UUFDRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUVPLCtDQUF1Qjs7Ozs7SUFBL0IsVUFBZ0MsT0FBdUI7O1FBQ3JELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN2QixDQUFBLEtBQUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUEsQ0FBQyxJQUFJLDRCQUFJLE9BQU8sR0FBRTtTQUM5QztJQUNILENBQUM7Ozs7O0lBRU8sa0NBQVU7Ozs7SUFBbEI7O1lBQ1EsUUFBUSxHQUFpQixJQUFJLENBQUMsZUFBZSxJQUFJLEVBQUU7UUFDekQsT0FBTyxRQUFRLENBQUMsR0FBRzs7OztRQUNqQixVQUFDLE1BQWtCLFdBQ2pCLG1CQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFBLEdBQUEsRUFDdEUsQ0FBQztJQUNKLENBQUM7O2dCQWhDRixVQUFVOzs7O2dCQU9pQixhQUFhLHVCQUZwQyxRQUFRLFlBQ1IsUUFBUTs0Q0FFUixNQUFNLFNBQUMsWUFBWSxjQUNuQixRQUFROztJQXdCYixvQkFBQztDQUFBLEFBakNELElBaUNDO1NBaENZLGFBQWE7OztJQUN4QixnQ0FBb0M7Ozs7O0lBR2xDLHVDQUVxQzs7Ozs7SUFDckMsd0NBRXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFNraXBTZWxmLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTmd4c1BsdWdpbkZuLCBOR1hTX1BMVUdJTlMsIE5neHNQbHVnaW4gfSBmcm9tICcuL3N5bWJvbHMnO1xyXG5cclxuLyoqXHJcbiAqIFBsdWdpbiBtYW5hZ2VyIGNsYXNzXHJcbiAqIEBpZ25vcmVcclxuICovXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFBsdWdpbk1hbmFnZXIge1xyXG4gIHB1YmxpYyBwbHVnaW5zOiBOZ3hzUGx1Z2luRm5bXSA9IFtdO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIEBPcHRpb25hbCgpXHJcbiAgICBAU2tpcFNlbGYoKVxyXG4gICAgcHJpdmF0ZSBfcGFyZW50TWFuYWdlcjogUGx1Z2luTWFuYWdlcixcclxuICAgIEBJbmplY3QoTkdYU19QTFVHSU5TKVxyXG4gICAgQE9wdGlvbmFsKClcclxuICAgIHByaXZhdGUgX3BsdWdpbkhhbmRsZXJzOiBOZ3hzUGx1Z2luW11cclxuICApIHtcclxuICAgIHRoaXMucmVnaXN0ZXJIYW5kbGVycygpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlckhhbmRsZXJzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5nZXRQbHVnaW5zKCk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyUGx1Z2luSW5NYW5hZ2VyKHRoaXMucGx1Z2lucyk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlZ2lzdGVyUGx1Z2luSW5NYW5hZ2VyKHBsdWdpbnM6IE5neHNQbHVnaW5GbltdKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5fcGFyZW50TWFuYWdlcikge1xyXG4gICAgICB0aGlzLl9wYXJlbnRNYW5hZ2VyLnBsdWdpbnMucHVzaCguLi5wbHVnaW5zKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0UGx1Z2lucygpOiBOZ3hzUGx1Z2luRm5bXSB7XHJcbiAgICBjb25zdCBoYW5kbGVyczogTmd4c1BsdWdpbltdID0gdGhpcy5fcGx1Z2luSGFuZGxlcnMgfHwgW107XHJcbiAgICByZXR1cm4gaGFuZGxlcnMubWFwKFxyXG4gICAgICAocGx1Z2luOiBOZ3hzUGx1Z2luKSA9PlxyXG4gICAgICAgIDxOZ3hzUGx1Z2luRm4+KHBsdWdpbi5oYW5kbGUgPyBwbHVnaW4uaGFuZGxlLmJpbmQocGx1Z2luKSA6IHBsdWdpbilcclxuICAgICk7XHJcbiAgfVxyXG59XHJcbiJdfQ==