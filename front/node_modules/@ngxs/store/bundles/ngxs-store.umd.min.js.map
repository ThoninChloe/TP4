{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@ngxs/store/src/execution/dispatch-outside-zone-ngxs-execution-strategy.ts","ng://@ngxs/store/src/symbols.ts","ng://@ngxs/store/src/execution/symbols.ts","ng://@ngxs/store/src/internal/internals.ts","ng://@ngxs/store/src/utils/utils.ts","ng://@ngxs/store/src/operators/of-action.ts","ng://@ngxs/store/src/execution/internal-ngxs-execution-strategy.ts","ng://@ngxs/store/src/operators/leave-ngxs.ts","ng://@ngxs/store/src/actions-stream.ts","ng://@ngxs/store/src/utils/compose.ts","ng://@ngxs/store/src/internal/state-stream.ts","ng://@ngxs/store/src/plugin-manager.ts","ng://@ngxs/store/src/internal/dispatcher.ts","ng://@ngxs/store/src/utils/freeze.ts","ng://@ngxs/store/src/configs/messages.config.ts","ng://@ngxs/store/src/host-environment/host-environment.ts","ng://@ngxs/store/src/internal/config-validator.ts","ng://@ngxs/store/src/internal/state-operations.ts","ng://@ngxs/store/src/internal/state-context-factory.ts","ng://@ngxs/store/src/internal/state-operators.ts","ng://@ngxs/store/src/utils/store-validators.ts","ng://@ngxs/store/src/internal/state-factory.ts","ng://@ngxs/store/src/internal/lifecycle-state-manager.ts","ng://@ngxs/store/src/utils/selector-utils.ts","ng://@ngxs/store/src/store.ts","ng://@ngxs/store/src/decorators/select/select-factory.ts","ng://@ngxs/store/src/actions/actions.ts","ng://@ngxs/store/src/modules/ngxs-root.module.ts","ng://@ngxs/store/src/modules/ngxs-feature.module.ts","ng://@ngxs/store/src/module.ts","ng://@ngxs/store/src/decorators/select/symbols.ts","ng://@ngxs/store/src/execution/noop-ngxs-execution-strategy.ts","ng://@ngxs/store/src/decorators/action.ts","ng://@ngxs/store/src/decorators/select/select.ts","ng://@ngxs/store/src/decorators/selector.ts","ng://@ngxs/store/src/decorators/selector-options.ts","ng://@ngxs/store/src/decorators/state.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","DispatchOutsideZoneNgxsExecutionStrategy","_ngZone","_platformId","verifyZoneIsNotNooped","enter","func","isPlatformServer","runInsideAngular","runOutsideAngular","leave","NgZone","isInAngularZone","run","_","Injectable","Inject","args","PLATFORM_ID","ROOT_STATE_TOKEN","InjectionToken","FEATURE_STATE_TOKEN","NGXS_PLUGINS","NG_TEST_MODE","NG_DEV_MODE","META_KEY","META_OPTIONS_KEY","SELECTOR_META_KEY","NgxsConfig","defaultsState","selectorOptions","injectContainerState","suppressErrors","compatibility","strictContentSecurityPolicy","executionStrategy","NGXS_EXECUTION_STRATEGY","ensureStoreMetadata","target","defineProperty","name","actions","defaults","path","selectFromAppState","children","instance","getStoreMetadata","_globalSelectorOptions","globalSelectorOptions","asReadonly","get","set","ensureSelectorMetadata","originalFn","containerClass","selectorName","getSelectorOptions","getSelectorMetadata","propGetter","paths","config","copyOfPaths","slice","obj","reduce","acc","part","compliantPropGetter","segments","seg","l","expr","Function","fastPropGetter","getActionTypeFromInstance","action","type","setValue","prop","val","split","lastIndex","index","isArray","getValue","ofActionDispatched","allowedTypes","_i","ofActionOperator","statuses","mapOperator","mapAction","allowedMap","filterMap","klass","allowedStatusMap","status","createAllowedStatusesMap","pipe","allowedStatuses","filter","ctx","actionType","typeMatch","statusMatch","filterStatus","mapActionResult","map","_a","result","successful","canceled","InternalNgxsExecutionStrategy","_executionStrategy","leaveNgxs","ngxsExecutionStrategy","source","Observable","sink","subscribe","complete","OrderedSubject","_this","_super","_itemQueue","_busyPushingNext","tslib_1.__extends","unshift","nextValue","pop","Subject","InternalActions","Actions","actions$","internalExecutionStrategy","observer","res","err","compose","funcs","curr","shift","nextArgs","StateStream","BehaviorSubject","PluginManager","_parentManager","_pluginHandlers","plugins","registerHandlers","getPlugins","registerPluginInManager","plugin","handle","bind","decorators","Optional","SkipSelf","InternalDispatchedActionResults","InternalDispatcher","_errorHandler","_actions","_actionResults","_pluginManager","_stateStream","_ngxsExecutionStrategy","dispatch","actionOrActions","dispatchByEvents","handleError","forkJoin","a","dispatchSingle","prevState","nextState","nextAction","actionResult$","getActionResultStream","createDispatchObservable","shareReplay","take","exhaustMap","of","throwError","EMPTY","ErrorHandler","deepFreeze","freeze","oIsFunction","hasOwnProp","getOwnPropertyNames","forEach","isFrozen","STATE_NAME","STATE_UNIQUE","STATE_NAME_PROPERTY","STATE_DECORATOR","INCORRECT_PRODUCTION","INCORRECT_DEVELOPMENT","SELECT_FACTORY_NOT_CONNECTED","ACTION_DECORATOR","SELECTOR_DECORATOR","CONFIG_MESSAGES","VALIDATION_CODE","current","newName","oldName","HostEnvironment","isTestMode","isDevMode","ConfigValidator","_host","_config","developmentMode","verifyDevMode","isIncorrectProduction","console","warn","MESSAGES","CODE","isIncorrectDevelopment","InternalStateOperations","_dispatcher","configValidator","getRootStateOperations","rootStateOperations","getState","setState","newState","ensureStateAndActionsAreImmutable","root","frozenValue","setStateToTheCurrentWithNew","results","stateOperations","currentState","StateContextFactory","_internalStateOperations","createStateContext","metadata","currentAppState","depth","setStateValue","newValue","newAppState","setStateFromOperator","stateOperator","patchState","existingState","isPrimitive","Error","k","simplePatch","StoreValidators","stateNameErrorMessage","checkCorrectStateName","stateNameRegex","test","checkStateNameIsUnique","state","statesByName","stateName","getValidStateMeta","meta","RegExp","StateFactory","_injector","_parentFactory","_stateContextFactory","_initialState","_connected","_states","_statesByName","states","cloneDefaults","undefined","checkStatesAreValid","stateClasses","add","newStates","addToStatesMap","graph","sorted","visited","visit","stateGraph","findName","stateClass","find","g","buildGraph","sortedStates","ancestors","dep","indexOf","join","keys","reverse","depths","newObj","child","keyToFind","key","parent_1","parent_2","findFullParentPath","nameGraph","bootstrappedStores","sortedStates_1","tslib_1.__values","sortedStates_1_1","name_1","addRuntimeInfoToMeta","stateMap","hasBeenMountedAndBootstrapped","addAndReturnDefaults","classes","connectActionHandlers","mergeMap","invokeActions","defaultIfEmpty","catchError","_c","_d","actionMetas","actionMetas_1","actionMetas_1_1","actionMeta","stateContext","fn","Promise","from","options","cancelUncompleted","takeUntil","statesMap","stateClasses_1","stateClasses_1_1","valueIsBootstrappedInInitialState","Injector","INITIAL_STATE_TOKEN","LifecycleStateManager","internalStateOperations","stateContextFactory","bootstrapper","ngxsBootstrap","tap","invokeInit","appBootstrapped$","appBootstrapped","invokeBootstrap","stateMetadatas","invokeLifecycleHooks","hook","stateMetadatas_1","stateMetadatas_1_1","NgxsBootstrapper","selectorOptionsMetaAccessor","getOptions","defineOptions","createSelector","selectors","creationMetadata","runtimeInfo","memoizedFn","memoize","returnValue","innerMemoizedFn","selectorMetaData","getExplicitSelectorOptions","selectorMetaDataClone","explicitOptions","getCustomSelectorOptions","setupSelectorMetadata","argumentSelectorFunctions","selectorsToApply","canInjectContainerState","getSelectorsToApply","selector","getSelectorFn","getRuntimeSelectorInfo","argFn","ex","TypeError","Store","_internalExecutionStrategy","initialStateValue","initStateStream","event","select","selectorFn","distinctUntilChanged","selectOnce","selectSnapshot","snapshot","reset","storeValues","ObjectUtils","merge","SelectFactory","store","InitState","UpdateState","addedStates","NgxsRootModule","factory","_store","_select","lifecycleStateManager","NgModule","NgxsFeatureModule","flattenedStates","flattenStates","total","values","NgxsModule","forRoot","ngModule","providers","ngxsTokenProviders","forFeature","provide","multi","useValue","useFactory","isAngularInTestMode","isAngularDevMode","useClass","ROOT_OPTIONS","ngxsConfigFactory","deps","APP_BOOTSTRAP_LISTENER","appBootstrapListenerFactory","getInitialState","bootstrap","InitialState","DOLLAR_CHAR_CODE","createSelectorFn","rawSelector","lastCharIndex","charCodeAt","removeDollarAtTheEnd","NoopNgxsExecutionStrategy","actions_1","actions_1_1","propertyKey","toString","selectorId","defineProperties","writable","enumerable","configurable","createSelectObservable","descriptor","newDescriptor","methodName","inheritedStateClass","getPrototypeOf","optionsWithInheritance","inheritanceOptions","getStateOptions","params","inheritedMeta","mutateMetaData","action1","type1","action2"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Inject, Injectable, NgZone, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformServer } from '@angular/common';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class DispatchOutsideZoneNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(private _ngZone: NgZone, @Inject(PLATFORM_ID) private _platformId: string) {\r\n    this.verifyZoneIsNotNooped(this._ngZone);\r\n  }\r\n\r\n  enter<T>(func: () => T): T {\r\n    if (isPlatformServer(this._platformId)) {\r\n      return this.runInsideAngular(func);\r\n    }\r\n    return this.runOutsideAngular(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this.runInsideAngular(func);\r\n  }\r\n\r\n  private runInsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return func();\r\n    }\r\n    return this._ngZone.run(func);\r\n  }\r\n\r\n  private runOutsideAngular<T>(func: () => T): T {\r\n    if (NgZone.isInAngularZone()) {\r\n      return this._ngZone.runOutsideAngular(func);\r\n    }\r\n    return func();\r\n  }\r\n\r\n  private verifyZoneIsNotNooped(_: NgZone): void {\r\n    /* - Removed because unsafe for Angular 5 - investigate\r\n    if (ngZone instanceof NoopNgZone) {\r\n      console.warn(\r\n        'Your application was bootstrapped with nooped zone and your execution strategy requires an ngZone'\r\n      );\r\n    }\r\n    */\r\n  }\r\n}\r\n","import { Injectable, InjectionToken, Type } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { ObjectKeyMap } from '@ngxs/store/internals';\r\nimport { SharedSelectorOptions } from './internal/internals';\r\nimport { NgxsExecutionStrategy } from './execution/symbols';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\n\r\nexport const ROOT_STATE_TOKEN = new InjectionToken<any>('ROOT_STATE_TOKEN');\r\nexport const FEATURE_STATE_TOKEN = new InjectionToken<any>('FEATURE_STATE_TOKEN');\r\nexport const NGXS_PLUGINS = new InjectionToken('NGXS_PLUGINS');\r\nexport const NG_TEST_MODE = new InjectionToken('NG_TEST_MODE');\r\nexport const NG_DEV_MODE = new InjectionToken('NG_DEV_MODE');\r\n\r\nexport const META_KEY = 'NGXS_META';\r\nexport const META_OPTIONS_KEY = 'NGXS_OPTIONS_META';\r\nexport const SELECTOR_META_KEY = 'NGXS_SELECTOR_META';\r\n\r\nexport type NgxsLifeCycle = Partial<NgxsOnInit> & Partial<NgxsAfterBootstrap>;\r\nexport type NgxsPluginFn = (state: any, mutation: any, next: NgxsNextPluginFn) => any;\r\n\r\n/**\r\n * The NGXS config settings.\r\n */\r\n@Injectable()\r\nexport class NgxsConfig {\r\n  /**\r\n   * Run in development mode. This will add additional debugging features:\r\n   * - Object.freeze on the state and actions to guarantee immutability\r\n   * (default: false)\r\n   */\r\n  developmentMode: boolean;\r\n  compatibility: {\r\n    /**\r\n     * Support a strict Content Security Policy.\r\n     * This will cirumvent some optimisations that violate a strict CSP through the use of `new Function(...)`.\r\n     * (default: false)\r\n     */\r\n    strictContentSecurityPolicy: boolean;\r\n  };\r\n  /**\r\n   * Determines the execution context to perform async operations inside. An implementation can be\r\n   * provided to override the default behaviour where the async operations are run\r\n   * outside Angular's zone but all observable behaviours of NGXS are run back inside Angular's zone.\r\n   * These observable behaviours are from:\r\n   *   `@Select(...)`, `store.select(...)`, `actions.subscribe(...)` or `store.dispatch(...).subscribe(...)`\r\n   * Every `zone.run` causes Angular to run change detection on the whole tree (`app.tick()`) so of your\r\n   * application doesn't rely on zone.js running change detection then you can switch to the\r\n   * `NoopNgxsExecutionStrategy` that doesn't interact with zones.\r\n   * (default: null)\r\n   */\r\n  executionStrategy: Type<NgxsExecutionStrategy>;\r\n  /**\r\n   * Defining the default state before module initialization\r\n   * This is convenient if we need to create a define our own set of states.\r\n   * @deprecated will be removed after v4\r\n   * (default: {})\r\n   */\r\n  defaultsState: ObjectKeyMap<any> = {};\r\n  /**\r\n   * Defining shared selector options\r\n   */\r\n  selectorOptions: SharedSelectorOptions = {\r\n    injectContainerState: true, // TODO: default is true in v3, will change in v4\r\n    suppressErrors: true // TODO: default is true in v3, will change in v4\r\n  };\r\n\r\n  constructor() {\r\n    this.compatibility = {\r\n      strictContentSecurityPolicy: false\r\n    };\r\n    this.executionStrategy = DispatchOutsideZoneNgxsExecutionStrategy;\r\n  }\r\n}\r\n\r\nexport type StateOperator<T> = (existing: Readonly<T>) => T;\r\n\r\n/**\r\n * State context provided to the actions in the state.\r\n */\r\nexport interface StateContext<T> {\r\n  /**\r\n   * Get the current state.\r\n   */\r\n  getState(): T;\r\n\r\n  /**\r\n   * Reset the state to a new value.\r\n   */\r\n  setState(val: T | StateOperator<T>): T;\r\n\r\n  /**\r\n   * Patch the existing state with the provided value.\r\n   */\r\n  patchState(val: Partial<T>): T;\r\n\r\n  /**\r\n   * Dispatch a new action and return the dispatched observable.\r\n   */\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport type NgxsNextPluginFn = (state: any, mutation: any) => any;\r\n\r\n/**\r\n * Plugin interface\r\n */\r\nexport interface NgxsPlugin {\r\n  /**\r\n   * Handle the state/action before its submitted to the state handlers.\r\n   */\r\n  handle(state: any, action: any, next: NgxsNextPluginFn): any;\r\n}\r\n\r\n/**\r\n * Options that can be provided to the store.\r\n */\r\nexport interface StoreOptions<T> {\r\n  /**\r\n   * Name of the state. Required.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * Default values for the state. If not provided, uses empty object.\r\n   */\r\n  defaults?: T;\r\n\r\n  /**\r\n   * Sub states for the given state.\r\n   */\r\n  children?: any[];\r\n}\r\n\r\nexport const enum LifecycleHooks {\r\n  NgxsOnInit = 'ngxsOnInit',\r\n  NgxsAfterBootstrap = 'ngxsAfterBootstrap'\r\n}\r\n\r\n/**\r\n * On init interface\r\n */\r\nexport interface NgxsOnInit {\r\n  ngxsOnInit(ctx?: StateContext<any>): void | any;\r\n}\r\n\r\n/**\r\n * After bootstrap interface\r\n */\r\nexport interface NgxsAfterBootstrap {\r\n  ngxsAfterBootstrap(ctx?: StateContext<any>): void;\r\n}\r\n\r\nexport type NgxsModuleOptions = Partial<NgxsConfig>;\r\n","import { InjectionToken } from '@angular/core';\r\n\r\n/*\r\n * Internal execution strategy injection token\r\n */\r\nexport const NGXS_EXECUTION_STRATEGY = new InjectionToken<NgxsExecutionStrategy>(\r\n  'NGXS_EXECUTION_STRATEGY'\r\n);\r\n\r\n/*\r\n * Execution strategy interface\r\n */\r\nexport interface NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T;\r\n  leave<T>(func: () => T): T;\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport {\r\n  META_KEY,\r\n  META_OPTIONS_KEY,\r\n  NgxsConfig,\r\n  SELECTOR_META_KEY,\r\n  StoreOptions\r\n} from '../symbols';\r\nimport { ActionHandlerMetaData } from '../actions/symbols';\r\n\r\nimport { ObjectKeyMap, StateClass } from '@ngxs/store/internals';\r\n\r\nfunction asReadonly<T>(value: T): Readonly<T> {\r\n  return value;\r\n}\r\n\r\n// inspired from https://stackoverflow.com/a/43674389\r\nexport interface StateClassInternal<T = any, U = any> extends StateClass<T> {\r\n  [META_KEY]?: MetaDataModel;\r\n  [META_OPTIONS_KEY]?: StoreOptions<U>;\r\n}\r\n\r\nexport type StateKeyGraph = ObjectKeyMap<string[]>;\r\nexport type StatesByName = ObjectKeyMap<StateClassInternal>;\r\n\r\nexport interface StateOperations<T> {\r\n  getState(): T;\r\n\r\n  setState(val: T): T;\r\n\r\n  dispatch(actions: any | any[]): Observable<void>;\r\n}\r\n\r\nexport interface MetaDataModel {\r\n  name: string | null;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  path: string | null;\r\n  selectFromAppState: SelectFromState | null;\r\n  children?: StateClassInternal[];\r\n  instance: any;\r\n}\r\n\r\nexport type SelectFromState = (state: any) => any;\r\n\r\nexport interface SharedSelectorOptions {\r\n  injectContainerState?: boolean;\r\n  suppressErrors?: boolean;\r\n}\r\n\r\nexport interface SelectorMetaDataModel {\r\n  selectFromAppState: SelectFromState | null;\r\n  originalFn: Function | null;\r\n  containerClass: any;\r\n  selectorName: string | null;\r\n  getSelectorOptions: () => SharedSelectorOptions;\r\n}\r\n\r\nexport interface MappedStore {\r\n  name: string;\r\n  actions: ObjectKeyMap<ActionHandlerMetaData[]>;\r\n  defaults: any;\r\n  instance: any;\r\n  depth: string;\r\n}\r\n\r\nexport interface StatesAndDefaults {\r\n  defaults: any;\r\n  states: MappedStore[];\r\n}\r\n\r\nexport type Callback<T = any, V = any> = (...args: V[]) => T;\r\n\r\n/**\r\n * Ensures metadata is attached to the class and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  if (!target.hasOwnProperty(META_KEY)) {\r\n    const defaultMetadata: MetaDataModel = {\r\n      name: null,\r\n      actions: {},\r\n      defaults: {},\r\n      path: null,\r\n      selectFromAppState: null,\r\n      children: [],\r\n      instance: null\r\n    };\r\n\r\n    Object.defineProperty(target, META_KEY, { value: defaultMetadata });\r\n  }\r\n  return getStoreMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the state class if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getStoreMetadata(target: StateClassInternal): MetaDataModel {\r\n  return target[META_KEY]!;\r\n}\r\n\r\n// closure variable used to store the global options\r\nlet _globalSelectorOptions: SharedSelectorOptions = {};\r\n\r\nexport const globalSelectorOptions = asReadonly({\r\n  get(): Readonly<SharedSelectorOptions> {\r\n    return _globalSelectorOptions;\r\n  },\r\n  set(value: Readonly<SharedSelectorOptions>) {\r\n    _globalSelectorOptions = { ...value };\r\n  }\r\n});\r\n\r\n/**\r\n * Ensures metadata is attached to the selector and returns it.\r\n *\r\n * @ignore\r\n */\r\nexport function ensureSelectorMetadata(target: Function): SelectorMetaDataModel {\r\n  if (!target.hasOwnProperty(SELECTOR_META_KEY)) {\r\n    const defaultMetadata: SelectorMetaDataModel = {\r\n      selectFromAppState: null,\r\n      originalFn: null,\r\n      containerClass: null,\r\n      selectorName: null,\r\n      getSelectorOptions: () => ({})\r\n    };\r\n\r\n    Object.defineProperty(target, SELECTOR_META_KEY, { value: defaultMetadata });\r\n  }\r\n\r\n  return getSelectorMetadata(target);\r\n}\r\n\r\n/**\r\n * Get the metadata attached to the selector if it exists.\r\n *\r\n * @ignore\r\n */\r\nexport function getSelectorMetadata(target: any): SelectorMetaDataModel {\r\n  return target[SELECTOR_META_KEY];\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * Note: This is not as fast as the `fastPropGetter` but is strict Content Security Policy compliant.\r\n * See perf hit: https://jsperf.com/fast-value-getter-given-path/1\r\n *\r\n * @ignore\r\n */\r\nfunction compliantPropGetter(paths: string[]): (x: any) => any {\r\n  const copyOfPaths = paths.slice();\r\n  return obj => copyOfPaths.reduce((acc: any, part: string) => acc && acc[part], obj);\r\n}\r\n\r\n/**\r\n * The generated function is faster than:\r\n * - pluck (Observable operator)\r\n * - memoize\r\n *\r\n * @ignore\r\n */\r\nfunction fastPropGetter(paths: string[]): (x: any) => any {\r\n  const segments = paths;\r\n  let seg = 'store.' + segments[0];\r\n  let i = 0;\r\n  const l = segments.length;\r\n\r\n  let expr = seg;\r\n  while (++i < l) {\r\n    expr = expr + ' && ' + (seg = seg + '.' + segments[i]);\r\n  }\r\n\r\n  const fn = new Function('store', 'return ' + expr + ';');\r\n\r\n  return <(x: any) => any>fn;\r\n}\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport function propGetter(paths: string[], config: NgxsConfig) {\r\n  if (config && config.compatibility && config.compatibility.strictContentSecurityPolicy) {\r\n    return compliantPropGetter(paths);\r\n  } else {\r\n    return fastPropGetter(paths);\r\n  }\r\n}\r\n\r\n/**\r\n * Given an array of states, it will return a object graph. Example:\r\n *    const states = [\r\n *      Cart,\r\n *      CartSaved,\r\n *      CartSavedItems\r\n *    ]\r\n *\r\n * would return:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function buildGraph(stateClasses: StateClassInternal[]): StateKeyGraph {\r\n  const findName = (stateClass: StateClassInternal) => {\r\n    const meta = stateClasses.find(g => g === stateClass);\r\n    if (!meta) {\r\n      throw new Error(\r\n        `Child state not found: ${stateClass}. \\r\\nYou may have forgotten to add states to module`\r\n      );\r\n    }\r\n\r\n    return meta[META_KEY]!.name!;\r\n  };\r\n\r\n  return stateClasses.reduce<StateKeyGraph>(\r\n    (result: StateKeyGraph, stateClass: StateClassInternal) => {\r\n      const { name, children } = stateClass[META_KEY]!;\r\n      result[name!] = (children || []).map(findName);\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a states array, returns object graph\r\n * returning the name and state metadata. Example:\r\n *\r\n *  const graph = {\r\n *    cart: { metadata }\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function nameToState(states: StateClassInternal[]): ObjectKeyMap<StateClassInternal> {\r\n  return states.reduce<ObjectKeyMap<StateClassInternal>>(\r\n    (result: ObjectKeyMap<StateClassInternal>, stateClass: StateClassInternal) => {\r\n      const meta = stateClass[META_KEY]!;\r\n      result[meta.name!] = stateClass;\r\n      return result;\r\n    },\r\n    {}\r\n  );\r\n}\r\n\r\n/**\r\n * Given a object relationship graph will return the full path\r\n * for the child items. Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const r = {\r\n *    cart: 'cart',\r\n *    saved: 'cart.saved',\r\n *    items: 'cart.saved.items'\r\n *  };\r\n *\r\n * @ignore\r\n */\r\nexport function findFullParentPath(\r\n  obj: StateKeyGraph,\r\n  newObj: ObjectKeyMap<string> = {}\r\n): ObjectKeyMap<string> {\r\n  const visit = (child: StateKeyGraph, keyToFind: string): string | null => {\r\n    for (const key in child) {\r\n      if (child.hasOwnProperty(key) && child[key].indexOf(keyToFind) >= 0) {\r\n        const parent = visit(child, key);\r\n        return parent !== null ? `${parent}.${key}` : key;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  for (const key in obj) {\r\n    if (obj.hasOwnProperty(key)) {\r\n      const parent = visit(obj, key);\r\n      newObj[key] = parent ? `${parent}.${key}` : key;\r\n    }\r\n  }\r\n\r\n  return newObj;\r\n}\r\n\r\n/**\r\n * Given a object graph, it will return the items topologically sorted Example:\r\n *\r\n *  const graph = {\r\n *    cart: ['saved'],\r\n *    saved: ['items'],\r\n *    items: []\r\n *  };\r\n *\r\n * would return:\r\n *\r\n *  const results = [\r\n *    'items',\r\n *    'saved',\r\n *    'cart'\r\n *  ];\r\n *\r\n * @ignore\r\n */\r\nexport function topologicalSort(graph: StateKeyGraph): string[] {\r\n  const sorted: string[] = [];\r\n  const visited: ObjectKeyMap<boolean> = {};\r\n\r\n  const visit = (name: string, ancestors: string[] = []) => {\r\n    if (!Array.isArray(ancestors)) {\r\n      ancestors = [];\r\n    }\r\n\r\n    ancestors.push(name);\r\n    visited[name] = true;\r\n\r\n    graph[name].forEach((dep: string) => {\r\n      if (ancestors.indexOf(dep) >= 0) {\r\n        throw new Error(\r\n          `Circular dependency '${dep}' is required by '${name}': ${ancestors.join(' -> ')}`\r\n        );\r\n      }\r\n\r\n      if (visited[dep]) {\r\n        return;\r\n      }\r\n\r\n      visit(dep, ancestors.slice(0));\r\n    });\r\n\r\n    if (sorted.indexOf(name) < 0) {\r\n      sorted.push(name);\r\n    }\r\n  };\r\n\r\n  Object.keys(graph).forEach(k => visit(k));\r\n\r\n  return sorted.reverse();\r\n}\r\n\r\n/**\r\n * Returns if the parameter is a object or not.\r\n *\r\n * @ignore\r\n */\r\nexport function isObject(obj: any) {\r\n  return (typeof obj === 'object' && obj !== null) || typeof obj === 'function';\r\n}\r\n","/**\r\n * Returns the type from an action instance/class.\r\n * @ignore\r\n */\r\nexport function getActionTypeFromInstance(action: any): string | undefined {\r\n  if (action.constructor && action.constructor.type) {\r\n    return action.constructor.type;\r\n  }\r\n\r\n  return action.type;\r\n}\r\n\r\n/**\r\n * Matches a action\r\n * @ignore\r\n */\r\nexport function actionMatcher(action1: any) {\r\n  const type1 = getActionTypeFromInstance(action1);\r\n\r\n  return function(action2: any) {\r\n    return type1 === getActionTypeFromInstance(action2);\r\n  };\r\n}\r\n\r\n/**\r\n * Set a deeply nested value. Example:\r\n *\r\n *   setValue({ foo: { bar: { eat: false } } },\r\n *      'foo.bar.eat', true) //=> { foo: { bar: { eat: true } } }\r\n *\r\n * While it traverses it also creates new objects from top down.\r\n *\r\n * @ignore\r\n */\r\nexport const setValue = (obj: any, prop: string, val: any) => {\r\n  obj = { ...obj };\r\n\r\n  const split = prop.split('.');\r\n  const lastIndex = split.length - 1;\r\n\r\n  split.reduce((acc, part, index) => {\r\n    if (index === lastIndex) {\r\n      acc[part] = val;\r\n    } else {\r\n      acc[part] = Array.isArray(acc[part]) ? acc[part].slice() : { ...acc[part] };\r\n    }\r\n\r\n    return acc && acc[part];\r\n  }, obj);\r\n\r\n  return obj;\r\n};\r\n\r\n/**\r\n * Get a deeply nested value. Example:\r\n *\r\n *    getValue({ foo: bar: [] }, 'foo.bar') //=> []\r\n *\r\n * @ignore\r\n */\r\nexport const getValue = (obj: any, prop: string): any =>\r\n  prop.split('.').reduce((acc: any, part: string) => acc && acc[part], obj);\r\n","import { OperatorFunction, Observable } from 'rxjs';\r\nimport { map, filter } from 'rxjs/operators';\r\nimport { getActionTypeFromInstance } from '../utils/utils';\r\nimport { ActionContext, ActionStatus } from '../actions-stream';\r\n\r\nexport interface ActionCompletion<T = any, E = Error> {\r\n  action: T;\r\n  result: {\r\n    successful: boolean;\r\n    canceled: boolean;\r\n    error?: E;\r\n  };\r\n}\r\n\r\nexport function ofAction<T>(allowedType: any): OperatorFunction<ActionContext, T>;\r\nexport function ofAction<T>(...allowedTypes: any[]): OperatorFunction<ActionContext, T>;\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will grab actions that have just been dispatched as well as actions that have completed\r\n */\r\nexport function ofAction(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been dispatched\r\n */\r\nexport function ofActionDispatched(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Dispatched]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been successfully completed\r\n */\r\nexport function ofActionSuccessful(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Successful]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been canceled\r\n */\r\nexport function ofActionCanceled(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Canceled]);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just been completed\r\n */\r\nexport function ofActionCompleted(...allowedTypes: any[]) {\r\n  const allowedStatuses = [\r\n    ActionStatus.Successful,\r\n    ActionStatus.Canceled,\r\n    ActionStatus.Errored\r\n  ];\r\n  return ofActionOperator(allowedTypes, allowedStatuses, mapActionResult);\r\n}\r\n\r\n/**\r\n * RxJS operator for selecting out specific actions.\r\n *\r\n * This will ONLY grab actions that have just thrown an error\r\n */\r\nexport function ofActionErrored(...allowedTypes: any[]) {\r\n  return ofActionOperator(allowedTypes, [ActionStatus.Errored]);\r\n}\r\n\r\nfunction ofActionOperator<T = any>(\r\n  allowedTypes: any[],\r\n  statuses?: ActionStatus[],\r\n  mapOperator: () => OperatorFunction<ActionContext, T> = mapAction\r\n) {\r\n  const allowedMap = createAllowedActionTypesMap(allowedTypes);\r\n  const allowedStatusMap = statuses && createAllowedStatusesMap(statuses);\r\n  return function(o: Observable<ActionContext>) {\r\n    return o.pipe(\r\n      filterStatus(allowedMap, allowedStatusMap),\r\n      mapOperator()\r\n    );\r\n  };\r\n}\r\n\r\nfunction filterStatus(allowedTypes: FilterMap, allowedStatuses?: FilterMap) {\r\n  return filter((ctx: ActionContext) => {\r\n    const actionType = getActionTypeFromInstance(ctx.action)!;\r\n    const typeMatch = allowedTypes[actionType];\r\n    const statusMatch = allowedStatuses ? allowedStatuses[ctx.status] : true;\r\n    return typeMatch && statusMatch;\r\n  });\r\n}\r\n\r\nfunction mapActionResult(): OperatorFunction<ActionContext, ActionCompletion> {\r\n  return map(({ action, status, error }: ActionContext) => {\r\n    return <ActionCompletion>{\r\n      action,\r\n      result: {\r\n        successful: ActionStatus.Successful === status,\r\n        canceled: ActionStatus.Canceled === status,\r\n        error\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction mapAction<T = any>(): OperatorFunction<ActionContext, T> {\r\n  return map((ctx: ActionContext) => <T>ctx.action);\r\n}\r\n\r\ninterface FilterMap {\r\n  [key: string]: boolean;\r\n}\r\n\r\nfunction createAllowedActionTypesMap(types: any[]): FilterMap {\r\n  return types.reduce(\r\n    (filterMap: FilterMap, klass: any) => {\r\n      filterMap[getActionTypeFromInstance(klass)!] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n\r\nfunction createAllowedStatusesMap(statuses: ActionStatus[]): FilterMap {\r\n  return statuses.reduce(\r\n    (filterMap: FilterMap, status: ActionStatus) => {\r\n      filterMap[status] = true;\r\n      return filterMap;\r\n    },\r\n    <FilterMap>{}\r\n  );\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy, NGXS_EXECUTION_STRATEGY } from './symbols';\r\n\r\n@Injectable()\r\nexport class InternalNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  constructor(\r\n    @Inject(NGXS_EXECUTION_STRATEGY) private _executionStrategy: NgxsExecutionStrategy\r\n  ) {}\r\n\r\n  enter<T>(func: () => T): T {\r\n    return this._executionStrategy.enter(func);\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return this._executionStrategy.leave(func);\r\n  }\r\n}\r\n","import { MonoTypeOperatorFunction, Observable, Observer } from 'rxjs';\r\nimport { NgxsExecutionStrategy } from '../execution/symbols';\r\n\r\n/**\r\n * Returns operator that will run\r\n * `subscribe` outside of the ngxs execution context\r\n */\r\nexport function leaveNgxs<T>(\r\n  ngxsExecutionStrategy: NgxsExecutionStrategy\r\n): MonoTypeOperatorFunction<T> {\r\n  return (source: Observable<T>) => {\r\n    return new Observable((sink: Observer<T>) => {\r\n      return source.subscribe({\r\n        next(value) {\r\n          ngxsExecutionStrategy.leave(() => sink.next(value));\r\n        },\r\n        error(error) {\r\n          ngxsExecutionStrategy.leave(() => sink.error(error));\r\n        },\r\n        complete() {\r\n          ngxsExecutionStrategy.leave(() => sink.complete());\r\n        }\r\n      });\r\n    });\r\n  };\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\n\r\n/**\r\n * Status of a dispatched action\r\n */\r\nexport const enum ActionStatus {\r\n  Dispatched = 'DISPATCHED',\r\n  Successful = 'SUCCESSFUL',\r\n  Canceled = 'CANCELED',\r\n  Errored = 'ERRORED'\r\n}\r\n\r\nexport interface ActionContext<T = any> {\r\n  status: ActionStatus;\r\n  action: T;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * Custom Subject that ensures that subscribers are notified of values in the order that they arrived.\r\n * A standard Subject does not have this guarantee.\r\n * For example, given the following code:\r\n * ```typescript\r\n *   const subject = new Subject<string>();\r\n     subject.subscribe(value => {\r\n       if (value === 'start') subject.next('end');\r\n     });\r\n     subject.subscribe(value => { });\r\n     subject.next('start');\r\n * ```\r\n * When `subject` is a standard `Subject<T>` the second subscriber would recieve `end` and then `start`.\r\n * When `subject` is a `OrderedSubject<T>` the second subscriber would recieve `start` and then `end`.\r\n */\r\nexport class OrderedSubject<T> extends Subject<T> {\r\n  private _itemQueue: T[] = [];\r\n  private _busyPushingNext = false;\r\n\r\n  next(value?: T): void {\r\n    if (this._busyPushingNext) {\r\n      this._itemQueue.unshift(value!);\r\n      return;\r\n    }\r\n    this._busyPushingNext = true;\r\n    super.next(value);\r\n    while (this._itemQueue.length > 0) {\r\n      const nextValue = this._itemQueue.pop();\r\n      super.next(nextValue);\r\n    }\r\n    this._busyPushingNext = false;\r\n  }\r\n}\r\n\r\n/**\r\n * Internal Action stream that is emitted anytime an action is dispatched.\r\n */\r\n@Injectable()\r\nexport class InternalActions extends OrderedSubject<ActionContext> {}\r\n\r\n/**\r\n * Action stream that is emitted anytime an action is dispatched.\r\n *\r\n * You can listen to this in services to react without stores.\r\n */\r\n@Injectable()\r\nexport class Actions extends Observable<any> {\r\n  constructor(\r\n    actions$: InternalActions,\r\n    internalExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {\r\n    super(observer => {\r\n      actions$\r\n        .pipe(leaveNgxs(internalExecutionStrategy))\r\n        .subscribe(\r\n          res => observer.next(res),\r\n          err => observer.error(err),\r\n          () => observer.complete()\r\n        );\r\n    });\r\n  }\r\n}\r\n","export type StateFn = (...args: any[]) => any;\r\n\r\n/**\r\n * Composes a array of functions from left to right. Example:\r\n *\r\n *      compose([fn, final])(state, action);\r\n *\r\n * then the funcs have a signature like:\r\n *\r\n *      function fn (state, action, next) {\r\n *          console.log('here', state, action, next);\r\n *          return next(state, action);\r\n *      }\r\n *\r\n *      function final (state, action) {\r\n *          console.log('here', state, action);\r\n *          return state;\r\n *      }\r\n *\r\n * the last function should not call `next`.\r\n *\r\n * @ignore\r\n */\r\nexport const compose = (funcs: StateFn[]) => (...args: any[]) => {\r\n  const curr = funcs.shift()!;\r\n  return curr(...args, (...nextArgs: any[]) => compose(funcs)(...nextArgs));\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nimport { ObjectKeyMap } from '@ngxs/store/internals';\r\n\r\n/**\r\n * BehaviorSubject of the entire state.\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateStream extends BehaviorSubject<ObjectKeyMap<any>> {\r\n  constructor() {\r\n    super({});\r\n  }\r\n}\r\n","import { Injectable, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { NgxsPluginFn, NGXS_PLUGINS, NgxsPlugin } from './symbols';\r\n\r\n/**\r\n * Plugin manager class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class PluginManager {\r\n  public plugins: NgxsPluginFn[] = [];\r\n\r\n  constructor(\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentManager: PluginManager,\r\n    @Inject(NGXS_PLUGINS)\r\n    @Optional()\r\n    private _pluginHandlers: NgxsPlugin[]\r\n  ) {\r\n    this.registerHandlers();\r\n  }\r\n\r\n  private registerHandlers(): void {\r\n    this.plugins = this.getPlugins();\r\n    this.registerPluginInManager(this.plugins);\r\n  }\r\n\r\n  private registerPluginInManager(plugins: NgxsPluginFn[]): void {\r\n    if (this._parentManager) {\r\n      this._parentManager.plugins.push(...plugins);\r\n    }\r\n  }\r\n\r\n  private getPlugins(): NgxsPluginFn[] {\r\n    const handlers: NgxsPlugin[] = this._pluginHandlers || [];\r\n    return handlers.map(\r\n      (plugin: NgxsPlugin) =>\r\n        <NgxsPluginFn>(plugin.handle ? plugin.handle.bind(plugin) : plugin)\r\n    );\r\n  }\r\n}\r\n","import { ErrorHandler, Injectable } from '@angular/core';\r\nimport { EMPTY, forkJoin, Observable, of, Subject, throwError } from 'rxjs';\r\nimport { exhaustMap, filter, shareReplay, take } from 'rxjs/operators';\r\n\r\nimport { compose } from '../utils/compose';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { StateStream } from './state-stream';\r\nimport { PluginManager } from '../plugin-manager';\r\nimport { InternalNgxsExecutionStrategy } from '../execution/internal-ngxs-execution-strategy';\r\nimport { leaveNgxs } from '../operators/leave-ngxs';\r\n\r\n/**\r\n * Internal Action result stream that is emitted when an action is completed.\r\n * This is used as a method of returning the action result to the dispatcher\r\n * for the observable returned by the dispatch(...) call.\r\n * The dispatcher then asynchronously pushes the result from this stream onto the main action stream as a result.\r\n */\r\n@Injectable()\r\nexport class InternalDispatchedActionResults extends Subject<ActionContext> {}\r\n\r\n@Injectable()\r\nexport class InternalDispatcher {\r\n  constructor(\r\n    private _errorHandler: ErrorHandler,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _pluginManager: PluginManager,\r\n    private _stateStream: StateStream,\r\n    private _ngxsExecutionStrategy: InternalNgxsExecutionStrategy\r\n  ) {}\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(actionOrActions: any | any[]): Observable<any> {\r\n    const result = this._ngxsExecutionStrategy.enter(() =>\r\n      this.dispatchByEvents(actionOrActions)\r\n    );\r\n\r\n    result.subscribe({\r\n      error: error =>\r\n        this._ngxsExecutionStrategy.leave(() => this._errorHandler.handleError(error))\r\n    });\r\n\r\n    return result.pipe(leaveNgxs(this._ngxsExecutionStrategy));\r\n  }\r\n\r\n  private dispatchByEvents(actionOrActions: any | any[]): Observable<any> {\r\n    if (Array.isArray(actionOrActions)) {\r\n      return forkJoin(actionOrActions.map(a => this.dispatchSingle(a)));\r\n    } else {\r\n      return this.dispatchSingle(actionOrActions);\r\n    }\r\n  }\r\n\r\n  private dispatchSingle(action: any): Observable<any> {\r\n    const prevState = this._stateStream.getValue();\r\n    const plugins = this._pluginManager.plugins;\r\n\r\n    return (compose([\r\n      ...plugins,\r\n      (nextState: any, nextAction: any) => {\r\n        if (nextState !== prevState) {\r\n          this._stateStream.next(nextState);\r\n        }\r\n        const actionResult$ = this.getActionResultStream(nextAction);\r\n        actionResult$.subscribe(ctx => this._actions.next(ctx));\r\n        this._actions.next({ action: nextAction, status: ActionStatus.Dispatched });\r\n        return this.createDispatchObservable(actionResult$);\r\n      }\r\n    ])(prevState, action) as Observable<any>).pipe(shareReplay());\r\n  }\r\n\r\n  private getActionResultStream(action: any): Observable<ActionContext> {\r\n    return this._actionResults.pipe(\r\n      filter(\r\n        (ctx: ActionContext) => ctx.action === action && ctx.status !== ActionStatus.Dispatched\r\n      ),\r\n      take(1),\r\n      shareReplay()\r\n    );\r\n  }\r\n\r\n  private createDispatchObservable(actionResult$: Observable<ActionContext>): Observable<any> {\r\n    return actionResult$\r\n      .pipe(\r\n        exhaustMap((ctx: ActionContext) => {\r\n          switch (ctx.status) {\r\n            case ActionStatus.Successful:\r\n              return of(this._stateStream.getValue());\r\n            case ActionStatus.Errored:\r\n              return throwError(ctx.error);\r\n            default:\r\n              return EMPTY;\r\n          }\r\n        })\r\n      )\r\n      .pipe(shareReplay());\r\n  }\r\n}\r\n","/**\r\n * Object freeze code\r\n * https://github.com/jsdf/deep-freeze\r\n */\r\nexport const deepFreeze = (o: any) => {\r\n  Object.freeze(o);\r\n\r\n  const oIsFunction = typeof o === 'function';\r\n  const hasOwnProp = Object.prototype.hasOwnProperty;\r\n\r\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\r\n    if (\r\n      hasOwnProp.call(o, prop) &&\r\n      (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true) &&\r\n      o[prop] !== null &&\r\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\r\n      !Object.isFrozen(o[prop])\r\n    ) {\r\n      deepFreeze(o[prop]);\r\n    }\r\n  });\r\n\r\n  return o;\r\n};\r\n","import { ObjectKeyMap } from '@ngxs/store/internals';\r\n\r\nexport enum VALIDATION_CODE {\r\n  STATE_NAME = 'STATE_NAME',\r\n  STATE_UNIQUE = 'STATE_UNIQUE',\r\n  STATE_NAME_PROPERTY = 'STATE_NAME_PROPERTY',\r\n  STATE_DECORATOR = 'STATE_DECORATOR',\r\n  INCORRECT_PRODUCTION = 'INCORRECT_PRODUCTION',\r\n  INCORRECT_DEVELOPMENT = 'INCORRECT_DEVELOPMENT',\r\n  SELECT_FACTORY_NOT_CONNECTED = 'SELECT_FACTORY_NOT_CONNECTED',\r\n  ACTION_DECORATOR = 'ACTION_DECORATOR',\r\n  SELECTOR_DECORATOR = 'SELECTOR_DECORATOR'\r\n}\r\n\r\nexport const CONFIG_MESSAGES: ObjectKeyMap<Function> = {\r\n  [VALIDATION_CODE.STATE_NAME]: (name: string) =>\r\n    `${name} is not a valid state name. It needs to be a valid object property name.`,\r\n  [VALIDATION_CODE.STATE_NAME_PROPERTY]: () => `States must register a 'name' property`,\r\n  [VALIDATION_CODE.STATE_UNIQUE]: (current: string, newName: string, oldName: string) =>\r\n    `State name '${current}' from ${newName} already exists in ${oldName}`,\r\n  [VALIDATION_CODE.STATE_DECORATOR]: () => 'States must be decorated with @State() decorator',\r\n  [VALIDATION_CODE.INCORRECT_PRODUCTION]: () =>\r\n    'Angular is running in production mode but NGXS is still running in the development mode!\\n' +\r\n    'Please set developmentMode to false on the NgxsModule options when in production mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.INCORRECT_DEVELOPMENT]: () =>\r\n    'RECOMMENDATION: Set developmentMode to true on the NgxsModule when Angular is running in development mode.\\n' +\r\n    'NgxsModule.forRoot(states, { developmentMode: !environment.production })',\r\n  [VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]: () =>\r\n    'SelectFactory not connected to store!',\r\n  [VALIDATION_CODE.ACTION_DECORATOR]: () =>\r\n    '@Action() decorator cannot be used with static methods',\r\n  [VALIDATION_CODE.SELECTOR_DECORATOR]: () => 'Selectors only work on methods'\r\n};\r\n","import { Inject, Injectable } from '@angular/core';\r\nimport { NG_DEV_MODE, NG_TEST_MODE } from '../symbols';\r\nimport { Callback } from '../internal/internals';\r\n\r\n@Injectable()\r\nexport class HostEnvironment {\r\n  constructor(\r\n    @Inject(NG_DEV_MODE) public isTestMode: Callback<boolean>,\r\n    @Inject(NG_TEST_MODE) public isDevMode: Callback<boolean>\r\n  ) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { HostEnvironment } from '../host-environment/host-environment';\r\n\r\n@Injectable()\r\nexport class ConfigValidator {\r\n  constructor(private _host: HostEnvironment, private _config: NgxsConfig) {}\r\n\r\n  private get isIncorrectProduction(): boolean {\r\n    return !this._host.isDevMode() && this._config.developmentMode;\r\n  }\r\n\r\n  private get isIncorrectDevelopment(): boolean {\r\n    return this._host.isDevMode() && !this._config.developmentMode;\r\n  }\r\n\r\n  public verifyDevMode(): void {\r\n    if (this._host.isTestMode()) {\r\n      return;\r\n    }\r\n\r\n    if (this.isIncorrectProduction) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_PRODUCTION]());\r\n    } else if (this.isIncorrectDevelopment) {\r\n      console.warn(MESSAGES[CODE.INCORRECT_DEVELOPMENT]());\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { StateOperations, StatesAndDefaults } from '../internal/internals';\r\nimport { InternalDispatcher } from '../internal/dispatcher';\r\nimport { StateStream } from './state-stream';\r\nimport { NgxsConfig } from '../symbols';\r\nimport { deepFreeze } from '../utils/freeze';\r\nimport { ConfigValidator } from '../internal/config-validator';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class InternalStateOperations {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _dispatcher: InternalDispatcher,\r\n    private _config: NgxsConfig,\r\n    configValidator: ConfigValidator\r\n  ) {\r\n    configValidator.verifyDevMode();\r\n  }\r\n\r\n  /**\r\n   * Returns the root state operators.\r\n   */\r\n  getRootStateOperations(): StateOperations<any> {\r\n    const rootStateOperations = {\r\n      getState: () => this._stateStream.getValue(),\r\n      setState: (newState: any) => this._stateStream.next(newState),\r\n      dispatch: (actions: any[]) => this._dispatcher.dispatch(actions)\r\n    };\r\n\r\n    if (this._config.developmentMode) {\r\n      return this.ensureStateAndActionsAreImmutable(rootStateOperations);\r\n    }\r\n\r\n    return rootStateOperations;\r\n  }\r\n\r\n  private ensureStateAndActionsAreImmutable(root: StateOperations<any>): StateOperations<any> {\r\n    return {\r\n      getState: () => root.getState(),\r\n      setState: value => {\r\n        const frozenValue = deepFreeze(value);\r\n        return root.setState(frozenValue);\r\n      },\r\n      dispatch: actions => {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n\r\n  setStateToTheCurrentWithNew(results: StatesAndDefaults): void {\r\n    const stateOperations: StateOperations<any> = this.getRootStateOperations();\r\n\r\n    // Get our current stream\r\n    const currentState = stateOperations.getState();\r\n    // Set the state to the current + new\r\n    stateOperations.setState({ ...currentState, ...results.defaults });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { StateContext, StateOperator } from '../symbols';\r\nimport { MappedStore } from '../internal/internals';\r\nimport { setValue, getValue } from '../utils/utils';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { simplePatch } from './state-operators';\r\n\r\n/**\r\n * State Context factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateContextFactory {\r\n  constructor(private _internalStateOperations: InternalStateOperations) {}\r\n\r\n  /**\r\n   * Create the state context\r\n   */\r\n  createStateContext<T>(metadata: MappedStore): StateContext<T> {\r\n    const root = this._internalStateOperations.getRootStateOperations();\r\n\r\n    function getState(currentAppState: any): T {\r\n      return getValue(currentAppState, metadata.depth);\r\n    }\r\n\r\n    function setStateValue(currentAppState: any, newValue: T): any {\r\n      const newAppState = setValue(currentAppState, metadata.depth, newValue);\r\n      root.setState(newAppState);\r\n      return newAppState;\r\n      // In doing this refactoring I noticed that there is a 'bug' where the\r\n      // application state is returned instead of this state slice.\r\n      // This has worked this way since the beginning see:\r\n      // https://github.com/ngxs/store/blame/324c667b4b7debd8eb979006c67ca0ae347d88cd/src/state-factory.ts\r\n      // This needs to be fixed, but is a 'breaking' change.\r\n      // I will do this fix in a subsequent PR and we can decide how to handle it.\r\n    }\r\n\r\n    function setStateFromOperator(currentAppState: any, stateOperator: StateOperator<T>) {\r\n      const local = getState(currentAppState);\r\n      const newValue = stateOperator(local);\r\n      return setStateValue(currentAppState, newValue);\r\n    }\r\n\r\n    function isStateOperator(value: T | StateOperator<T>): value is StateOperator<T> {\r\n      return typeof value === 'function';\r\n    }\r\n\r\n    return {\r\n      getState(): T {\r\n        const currentAppState = root.getState();\r\n        return getState(currentAppState);\r\n      },\r\n      patchState(val: Partial<T>): T {\r\n        const currentAppState = root.getState();\r\n        const patchOperator = simplePatch<T>(val);\r\n        return setStateFromOperator(currentAppState, patchOperator);\r\n      },\r\n      setState(val: T | StateOperator<T>): T {\r\n        const currentAppState = root.getState();\r\n        return isStateOperator(val)\r\n          ? setStateFromOperator(currentAppState, val)\r\n          : setStateValue(currentAppState, val);\r\n      },\r\n      dispatch(actions: any | any[]): Observable<void> {\r\n        return root.dispatch(actions);\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { StateOperator } from '../symbols';\r\n\r\nexport function simplePatch<T>(val: Partial<T>): StateOperator<T> {\r\n  return (existingState: Readonly<T>) => {\r\n    const isArray = Array.isArray(val);\r\n    const isPrimitive = typeof val !== 'object';\r\n    if (isArray) {\r\n      throw new Error('Patching arrays is not supported.');\r\n    }\r\n    if (isPrimitive) {\r\n      throw new Error('Patching primitives is not supported.');\r\n    }\r\n    const newState = { ...(<any>existingState) };\r\n    for (const k in val) {\r\n      newState[k] = val[k];\r\n    }\r\n    return <T>newState;\r\n  };\r\n}\r\n","import {\r\n  getStoreMetadata,\r\n  MetaDataModel,\r\n  StateClassInternal,\r\n  StatesByName\r\n} from '../internal/internals';\r\nimport {\r\n  CONFIG_MESSAGES as MESSAGES,\r\n  VALIDATION_CODE as CODE\r\n} from '../configs/messages.config';\r\n\r\nexport abstract class StoreValidators {\r\n  public static stateNameRegex: RegExp = new RegExp('^[a-zA-Z0-9_]+$');\r\n\r\n  public static stateNameErrorMessage(name: string) {\r\n    return MESSAGES[CODE.STATE_NAME](name);\r\n  }\r\n\r\n  public static checkCorrectStateName(name: string) {\r\n    if (!name) {\r\n      throw new Error(MESSAGES[CODE.STATE_NAME_PROPERTY]());\r\n    }\r\n\r\n    if (!this.stateNameRegex.test(name)) {\r\n      throw new Error(this.stateNameErrorMessage(name));\r\n    }\r\n  }\r\n\r\n  public static checkStateNameIsUnique(\r\n    state: StateClassInternal,\r\n    statesByName: StatesByName\r\n  ): string {\r\n    const meta: MetaDataModel = this.getValidStateMeta(state);\r\n    const stateName: string = meta!.name as string;\r\n    const existingState = statesByName[stateName];\r\n    if (existingState && existingState !== state) {\r\n      throw new Error(MESSAGES[CODE.STATE_UNIQUE](stateName, state.name, existingState.name));\r\n    }\r\n    return stateName;\r\n  }\r\n\r\n  public static getValidStateMeta(state: StateClassInternal): MetaDataModel {\r\n    const meta: MetaDataModel = getStoreMetadata(state);\r\n    if (!meta) {\r\n      throw new Error(MESSAGES[CODE.STATE_DECORATOR]());\r\n    }\r\n\r\n    return meta;\r\n  }\r\n}\r\n","import { Injectable, Injector, Optional, SkipSelf, Inject } from '@angular/core';\r\nimport { forkJoin, from, Observable, of, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  defaultIfEmpty,\r\n  filter,\r\n  map,\r\n  mergeMap,\r\n  shareReplay,\r\n  takeUntil\r\n} from 'rxjs/operators';\r\n\r\nimport { META_KEY, NgxsConfig } from '../symbols';\r\nimport {\r\n  buildGraph,\r\n  findFullParentPath,\r\n  isObject,\r\n  MappedStore,\r\n  MetaDataModel,\r\n  nameToState,\r\n  propGetter,\r\n  StateClassInternal,\r\n  StateKeyGraph,\r\n  StatesAndDefaults,\r\n  StatesByName,\r\n  topologicalSort\r\n} from './internals';\r\nimport { getActionTypeFromInstance, getValue, setValue } from '../utils/utils';\r\nimport { ofActionDispatched } from '../operators/of-action';\r\nimport { ActionContext, ActionStatus, InternalActions } from '../actions-stream';\r\nimport { InternalDispatchedActionResults } from '../internal/dispatcher';\r\nimport { StateContextFactory } from '../internal/state-context-factory';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { INITIAL_STATE_TOKEN, ObjectKeyMap } from '@ngxs/store/internals';\r\n\r\n/**\r\n * State factory class\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class StateFactory {\r\n  private _connected = false;\r\n\r\n  constructor(\r\n    private _injector: Injector,\r\n    private _config: NgxsConfig,\r\n    @Optional()\r\n    @SkipSelf()\r\n    private _parentFactory: StateFactory,\r\n    private _actions: InternalActions,\r\n    private _actionResults: InternalDispatchedActionResults,\r\n    private _stateContextFactory: StateContextFactory,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    private _initialState: any\r\n  ) {}\r\n\r\n  private _states: MappedStore[] = [];\r\n\r\n  public get states(): MappedStore[] {\r\n    return this._parentFactory ? this._parentFactory.states : this._states;\r\n  }\r\n\r\n  private _statesByName: StatesByName = {};\r\n\r\n  public get statesByName(): StatesByName {\r\n    return this._parentFactory ? this._parentFactory.statesByName : this._statesByName;\r\n  }\r\n\r\n  private static cloneDefaults(defaults: any): any {\r\n    let value = {};\r\n\r\n    if (Array.isArray(defaults)) {\r\n      value = defaults.slice();\r\n    } else if (isObject(defaults)) {\r\n      value = { ...defaults };\r\n    } else if (defaults === undefined) {\r\n      value = {};\r\n    } else {\r\n      value = defaults;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  private static checkStatesAreValid(stateClasses: StateClassInternal[]): void {\r\n    stateClasses.forEach(StoreValidators.getValidStateMeta);\r\n  }\r\n\r\n  /**\r\n   * Add a new state to the global defs.\r\n   */\r\n  add(stateClasses: StateClassInternal[]): MappedStore[] {\r\n    StateFactory.checkStatesAreValid(stateClasses);\r\n    const { newStates } = this.addToStatesMap(stateClasses);\r\n    if (!newStates.length) return [];\r\n\r\n    const stateGraph: StateKeyGraph = buildGraph(newStates);\r\n    const sortedStates: string[] = topologicalSort(stateGraph);\r\n    const depths: ObjectKeyMap<string> = findFullParentPath(stateGraph);\r\n    const nameGraph: ObjectKeyMap<StateClassInternal> = nameToState(newStates);\r\n    const bootstrappedStores: MappedStore[] = [];\r\n\r\n    for (const name of sortedStates) {\r\n      const stateClass: StateClassInternal = nameGraph[name];\r\n      const depth: string = depths[name];\r\n      const meta: MetaDataModel = stateClass[META_KEY]!;\r\n\r\n      this.addRuntimeInfoToMeta(meta, depth);\r\n\r\n      const stateMap: MappedStore = {\r\n        name,\r\n        depth,\r\n        actions: meta.actions,\r\n        instance: this._injector.get(stateClass),\r\n        defaults: StateFactory.cloneDefaults(meta.defaults)\r\n      };\r\n\r\n      // ensure our store hasn't already been added\r\n      // but don't throw since it could be lazy\r\n      // loaded from different paths\r\n      if (!this.hasBeenMountedAndBootstrapped(name, depth)) {\r\n        bootstrappedStores.push(stateMap);\r\n      }\r\n\r\n      this.states.push(stateMap);\r\n    }\r\n\r\n    return bootstrappedStores;\r\n  }\r\n\r\n  /**\r\n   * Add a set of states to the store and return the defaults\r\n   */\r\n  addAndReturnDefaults(stateClasses: StateClassInternal[]): StatesAndDefaults {\r\n    const classes: StateClassInternal[] = stateClasses || [];\r\n\r\n    const states: MappedStore[] = this.add(classes);\r\n    const defaults = states.reduce(\r\n      (result: any, meta: MappedStore) => setValue(result, meta.depth, meta.defaults),\r\n      {}\r\n    );\r\n    return { defaults, states };\r\n  }\r\n\r\n  /**\r\n   * Bind the actions to the handlers\r\n   */\r\n  connectActionHandlers() {\r\n    if (this._connected) return;\r\n    this._actions\r\n      .pipe(\r\n        filter((ctx: ActionContext) => ctx.status === ActionStatus.Dispatched),\r\n        mergeMap(({ action }) =>\r\n          this.invokeActions(this._actions, action!).pipe(\r\n            map(() => <ActionContext>{ action, status: ActionStatus.Successful }),\r\n            defaultIfEmpty(<ActionContext>{ action, status: ActionStatus.Canceled }),\r\n            catchError(error =>\r\n              of(<ActionContext>{ action, status: ActionStatus.Errored, error })\r\n            )\r\n          )\r\n        )\r\n      )\r\n      .subscribe(ctx => this._actionResults.next(ctx));\r\n    this._connected = true;\r\n  }\r\n\r\n  /**\r\n   * Invoke actions on the states.\r\n   */\r\n  invokeActions(actions$: InternalActions, action: any) {\r\n    const results = [];\r\n\r\n    for (const metadata of this.states) {\r\n      const type = getActionTypeFromInstance(action)!;\r\n      const actionMetas = metadata.actions[type];\r\n\r\n      if (actionMetas) {\r\n        for (const actionMeta of actionMetas) {\r\n          const stateContext = this._stateContextFactory.createStateContext(metadata);\r\n          try {\r\n            let result = metadata.instance[actionMeta.fn](stateContext, action);\r\n\r\n            if (result instanceof Promise) {\r\n              result = from(result);\r\n            }\r\n\r\n            if (result instanceof Observable) {\r\n              if (actionMeta.options.cancelUncompleted) {\r\n                // todo: ofActionDispatched should be used with action class\r\n                result = result.pipe(\r\n                  takeUntil(actions$.pipe(ofActionDispatched(action as any)))\r\n                );\r\n              }\r\n            } else {\r\n              result = of({}).pipe(shareReplay());\r\n            }\r\n\r\n            results.push(result);\r\n          } catch (e) {\r\n            results.push(throwError(e));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!results.length) {\r\n      results.push(of({}));\r\n    }\r\n\r\n    return forkJoin(results);\r\n  }\r\n\r\n  private addToStatesMap(\r\n    stateClasses: StateClassInternal[]\r\n  ): { newStates: StateClassInternal[] } {\r\n    const newStates: StateClassInternal[] = [];\r\n    const statesMap: StatesByName = this.statesByName;\r\n\r\n    for (const stateClass of stateClasses) {\r\n      const stateName: string = StoreValidators.checkStateNameIsUnique(stateClass, statesMap);\r\n      const unmountedState = !statesMap[stateName];\r\n      if (unmountedState) {\r\n        newStates.push(stateClass);\r\n        statesMap[stateName] = stateClass;\r\n      }\r\n    }\r\n\r\n    return { newStates };\r\n  }\r\n\r\n  private addRuntimeInfoToMeta(meta: MetaDataModel, depth: string): void {\r\n    meta.path = depth;\r\n    meta.selectFromAppState = propGetter(depth.split('.'), this._config);\r\n  }\r\n\r\n  /**\r\n   * @description\r\n   * the method checks if the state has already been added to the tree\r\n   * and completed the life cycle\r\n   * @param name\r\n   * @param path\r\n   */\r\n  private hasBeenMountedAndBootstrapped(name: string, path: string): boolean {\r\n    const valueIsBootstrappedInInitialState: boolean =\r\n      getValue(this._initialState, path) !== undefined;\r\n    return this.statesByName[name] && valueIsBootstrappedInInitialState;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { NgxsBootstrapper } from '@ngxs/store/internals';\r\nimport { filter, tap, mergeMap } from 'rxjs/operators';\r\n\r\nimport { StateContextFactory } from './state-context-factory';\r\nimport { InternalStateOperations } from './state-operations';\r\nimport { MappedStore, StatesAndDefaults } from './internals';\r\nimport { LifecycleHooks, NgxsLifeCycle } from '../symbols';\r\n\r\n@Injectable()\r\nexport class LifecycleStateManager {\r\n  constructor(\r\n    private internalStateOperations: InternalStateOperations,\r\n    private stateContextFactory: StateContextFactory,\r\n    private bootstrapper: NgxsBootstrapper\r\n  ) {}\r\n\r\n  ngxsBootstrap<T>(action: T, results: StatesAndDefaults | undefined): void {\r\n    this.internalStateOperations\r\n      .getRootStateOperations()\r\n      .dispatch(action)\r\n      .pipe(\r\n        filter(() => !!results),\r\n        tap(() => this.invokeInit(results!.states)),\r\n        mergeMap(() => this.bootstrapper.appBootstrapped$),\r\n        filter(appBootstrapped => !!appBootstrapped)\r\n      )\r\n      .subscribe(() => {\r\n        this.invokeBootstrap(results!.states);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Invoke the init function on the states.\r\n   */\r\n  invokeInit(stateMetadatas: MappedStore[]): void {\r\n    this.invokeLifecycleHooks(stateMetadatas, LifecycleHooks.NgxsOnInit);\r\n  }\r\n\r\n  /**\r\n   * Invoke the bootstrap function on the states.\r\n   */\r\n  invokeBootstrap(stateMetadatas: MappedStore[]) {\r\n    this.invokeLifecycleHooks(stateMetadatas, LifecycleHooks.NgxsAfterBootstrap);\r\n  }\r\n\r\n  private invokeLifecycleHooks(stateMetadatas: MappedStore[], hook: LifecycleHooks): void {\r\n    for (const metadata of stateMetadatas) {\r\n      const instance: NgxsLifeCycle = metadata.instance;\r\n\r\n      if (instance[hook]) {\r\n        const stateContext = this.stateContextFactory.createStateContext(metadata);\r\n        instance[hook]!(stateContext);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { memoize } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  ensureSelectorMetadata,\r\n  getSelectorMetadata,\r\n  getStoreMetadata,\r\n  globalSelectorOptions,\r\n  SelectFromState,\r\n  SelectorMetaDataModel,\r\n  SharedSelectorOptions\r\n} from '../internal/internals';\r\n\r\nconst SELECTOR_OPTIONS_META_KEY = 'NGXS_SELECTOR_OPTIONS_META';\r\n\r\nexport const selectorOptionsMetaAccessor = {\r\n  getOptions: (target: any): SharedSelectorOptions => {\r\n    return (target && (<any>target)[SELECTOR_OPTIONS_META_KEY]) || {};\r\n  },\r\n  defineOptions: (target: any, options: SharedSelectorOptions) => {\r\n    if (!target) return;\r\n    (<any>target)[SELECTOR_OPTIONS_META_KEY] = options;\r\n  }\r\n};\r\n\r\ninterface CreationMetadata {\r\n  containerClass: any;\r\n  selectorName: string;\r\n  getSelectorOptions?: () => SharedSelectorOptions;\r\n}\r\n\r\ninterface RuntimeSelectorInfo {\r\n  selectorOptions: SharedSelectorOptions;\r\n  argumentSelectorFunctions: ((state: any) => any)[];\r\n}\r\n\r\n/**\r\n * Function for creating a selector\r\n * @param selectors The selectors to use to create the arguments of this function\r\n * @param originalFn The original function being made into a selector\r\n * @param creationMetadata\r\n */\r\nexport function createSelector<T extends (...args: any[]) => any>(\r\n  selectors: any[] | undefined,\r\n  originalFn: T,\r\n  creationMetadata?: CreationMetadata\r\n) {\r\n  const containerClass = creationMetadata && creationMetadata.containerClass;\r\n  const wrappedFn = function wrappedSelectorFn(...args: any[]) {\r\n    const returnValue = originalFn.apply(containerClass, args);\r\n    if (returnValue instanceof Function) {\r\n      const innerMemoizedFn = memoize.apply(null, [returnValue]);\r\n      return innerMemoizedFn;\r\n    }\r\n    return returnValue;\r\n  } as T;\r\n  const memoizedFn = memoize(wrappedFn);\r\n  const selectorMetaData = setupSelectorMetadata<T>(memoizedFn, originalFn, creationMetadata);\r\n  let runtimeInfo: RuntimeSelectorInfo;\r\n\r\n  const selectFromAppState = (state: any) => {\r\n    const results = [];\r\n\r\n    runtimeInfo = runtimeInfo || getRuntimeSelectorInfo(selectorMetaData, selectors);\r\n    const { suppressErrors } = runtimeInfo.selectorOptions;\r\n    const { argumentSelectorFunctions } = runtimeInfo;\r\n\r\n    // Determine arguments from the app state using the selectors\r\n    results.push(...argumentSelectorFunctions.map(argFn => argFn(state)));\r\n\r\n    // if the lambda tries to access a something on the\r\n    // state that doesn't exist, it will throw a TypeError.\r\n    // since this is quite usual behaviour, we simply return undefined if so.\r\n    try {\r\n      return memoizedFn(...results);\r\n    } catch (ex) {\r\n      if (ex instanceof TypeError && suppressErrors) {\r\n        return undefined;\r\n      }\r\n\r\n      throw ex;\r\n    }\r\n  };\r\n\r\n  selectorMetaData.selectFromAppState = selectFromAppState;\r\n\r\n  return memoizedFn;\r\n}\r\n\r\nfunction setupSelectorMetadata<T extends (...args: any[]) => any>(\r\n  memoizedFn: T,\r\n  originalFn: T,\r\n  creationMetadata: CreationMetadata | undefined\r\n) {\r\n  const selectorMetaData = ensureSelectorMetadata(memoizedFn);\r\n  selectorMetaData.originalFn = originalFn;\r\n  let getExplicitSelectorOptions = () => ({});\r\n  if (creationMetadata) {\r\n    selectorMetaData.containerClass = creationMetadata.containerClass;\r\n    selectorMetaData.selectorName = creationMetadata.selectorName;\r\n    getExplicitSelectorOptions =\r\n      creationMetadata.getSelectorOptions || getExplicitSelectorOptions;\r\n  }\r\n  const selectorMetaDataClone = { ...selectorMetaData };\r\n  selectorMetaData.getSelectorOptions = () =>\r\n    getCustomSelectorOptions(selectorMetaDataClone, getExplicitSelectorOptions());\r\n  return selectorMetaData;\r\n}\r\n\r\nfunction getRuntimeSelectorInfo(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n): RuntimeSelectorInfo {\r\n  const selectorOptions = selectorMetaData.getSelectorOptions();\r\n  const selectorsToApply = getSelectorsToApply(selectorMetaData, selectors);\r\n  const argumentSelectorFunctions = selectorsToApply.map(selector => getSelectorFn(selector));\r\n  return {\r\n    selectorOptions,\r\n    argumentSelectorFunctions\r\n  };\r\n}\r\n\r\nfunction getCustomSelectorOptions(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  explicitOptions: SharedSelectorOptions\r\n): SharedSelectorOptions {\r\n  const selectorOptions: SharedSelectorOptions = {\r\n    ...globalSelectorOptions.get(),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.containerClass) || {}),\r\n    ...(selectorOptionsMetaAccessor.getOptions(selectorMetaData.originalFn) || {}),\r\n    ...(selectorMetaData.getSelectorOptions() || {}),\r\n    ...explicitOptions\r\n  };\r\n\r\n  return selectorOptions;\r\n}\r\n\r\nfunction getSelectorsToApply(\r\n  selectorMetaData: SelectorMetaDataModel,\r\n  selectors: any[] | undefined = []\r\n) {\r\n  const selectorsToApply = [];\r\n  const canInjectContainerState =\r\n    selectors.length === 0 || selectorMetaData.getSelectorOptions().injectContainerState;\r\n  const containerClass = selectorMetaData.containerClass;\r\n  if (containerClass && canInjectContainerState) {\r\n    // If we are on a state class, add it as the first selector parameter\r\n    const metadata = getStoreMetadata(containerClass);\r\n    if (metadata) {\r\n      selectorsToApply.push(containerClass);\r\n    }\r\n  }\r\n  if (selectors) {\r\n    selectorsToApply.push(...selectors);\r\n  }\r\n  return selectorsToApply;\r\n}\r\n\r\n/**\r\n * This function gets the selector function to be used to get the selected slice from the app state\r\n * @ignore\r\n */\r\nexport function getSelectorFn(selector: any): SelectFromState {\r\n  const metadata = getSelectorMetadata(selector) || getStoreMetadata(selector);\r\n  return (metadata && metadata.selectFromAppState) || selector;\r\n}\r\n","// tslint:disable:unified-signatures\r\nimport { Inject, Injectable, Optional, Type } from '@angular/core';\r\nimport { Observable, of, Subscription, throwError } from 'rxjs';\r\nimport { catchError, distinctUntilChanged, map, take } from 'rxjs/operators';\r\nimport { INITIAL_STATE_TOKEN, ObjectKeyMap, ObjectUtils } from '@ngxs/store/internals';\r\n\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { getSelectorFn } from './utils/selector-utils';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { leaveNgxs } from './operators/leave-ngxs';\r\nimport { NgxsConfig } from './symbols';\r\n\r\n@Injectable()\r\nexport class Store {\r\n  constructor(\r\n    private _stateStream: StateStream,\r\n    private _internalStateOperations: InternalStateOperations,\r\n    private _config: NgxsConfig,\r\n    private _internalExecutionStrategy: InternalNgxsExecutionStrategy,\r\n    @Optional()\r\n    @Inject(INITIAL_STATE_TOKEN)\r\n    initialStateValue: any\r\n  ) {\r\n    this.initStateStream(initialStateValue);\r\n  }\r\n\r\n  /**\r\n   * Dispatches event(s).\r\n   */\r\n  dispatch(event: any | any[]): Observable<any> {\r\n    return this._internalStateOperations.getRootStateOperations().dispatch(event);\r\n  }\r\n\r\n  /**\r\n   * Selects a slice of data from the store.\r\n   */\r\n  select<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  select<T = any>(selector: string | Type<any>): Observable<T>;\r\n  select(selector: any): Observable<any> {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return this._stateStream.pipe(\r\n      map(selectorFn),\r\n      catchError((err: Error): Observable<never> | Observable<undefined> => {\r\n        // if error is TypeError we swallow it to prevent usual errors with property access\r\n        const { suppressErrors } = this._config.selectorOptions;\r\n\r\n        if (err instanceof TypeError && suppressErrors) {\r\n          return of(undefined);\r\n        }\r\n\r\n        // rethrow other errors\r\n        return throwError(err);\r\n      }),\r\n      distinctUntilChanged(),\r\n      leaveNgxs(this._internalExecutionStrategy)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Select one slice of data from the store.\r\n   */\r\n\r\n  selectOnce<T>(selector: (state: any, ...states: any[]) => T): Observable<T>;\r\n  selectOnce<T = any>(selector: string | Type<any>): Observable<T>;\r\n  selectOnce(selector: any): Observable<any> {\r\n    return this.select(selector).pipe(take(1));\r\n  }\r\n\r\n  /**\r\n   * Select a snapshot from the state.\r\n   */\r\n  selectSnapshot<T>(selector: (state: any, ...states: any[]) => T): T;\r\n  selectSnapshot<T = any>(selector: string | Type<any>): T;\r\n  selectSnapshot(selector: any): any {\r\n    const selectorFn = getSelectorFn(selector);\r\n    return selectorFn(this._stateStream.getValue());\r\n  }\r\n\r\n  /**\r\n   * Allow the user to subscribe to the root of the state\r\n   */\r\n  subscribe(fn?: (value: any) => void): Subscription {\r\n    return this._stateStream.pipe(leaveNgxs(this._internalExecutionStrategy)).subscribe(fn);\r\n  }\r\n\r\n  /**\r\n   * Return the raw value of the state.\r\n   */\r\n  snapshot(): any {\r\n    return this._internalStateOperations.getRootStateOperations().getState();\r\n  }\r\n\r\n  /**\r\n   * Reset the state to a specific point in time. This method is useful\r\n   * for plugin's who need to modify the state directly or unit testing.\r\n   */\r\n  reset(state: any) {\r\n    return this._internalStateOperations.getRootStateOperations().setState(state);\r\n  }\r\n\r\n  private initStateStream(initialStateValue: any): void {\r\n    const value: ObjectKeyMap<any> = this._stateStream.value;\r\n    const storeIsEmpty: boolean = !value || Object.keys(value).length === 0;\r\n    if (storeIsEmpty) {\r\n      const defaultStateNotEmpty: boolean = Object.keys(this._config.defaultsState).length > 0;\r\n      const storeValues: ObjectKeyMap<any> = defaultStateNotEmpty\r\n        ? ObjectUtils.merge(this._config.defaultsState, initialStateValue)\r\n        : initialStateValue;\r\n\r\n      this._stateStream.next(storeValues);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { Store } from '../../store';\r\nimport { NgxsConfig } from '../../symbols';\r\n\r\n/**\r\n * Allows the select decorator to get access to the DI store.\r\n * @internal only use in @Select decorator\r\n * @ignore\r\n */\r\n@Injectable()\r\nexport class SelectFactory {\r\n  public static store: Store | null = null;\r\n  public static config: NgxsConfig | null = null;\r\n\r\n  constructor(store: Store, config: NgxsConfig) {\r\n    SelectFactory.store = store;\r\n    SelectFactory.config = config;\r\n  }\r\n}\r\n","import { ObjectKeyMap } from '@ngxs/store/internals';\r\n\r\n/**\r\n * Init action\r\n */\r\nexport class InitState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@INIT';\r\n  }\r\n}\r\n\r\n/**\r\n * Update action\r\n */\r\nexport class UpdateState {\r\n  static get type() {\r\n    // NOTE: Not necessary to declare the type in this way in your code. See https://github.com/ngxs/store/pull/644#issuecomment-436003138\r\n    return '@@UPDATE_STATE';\r\n  }\r\n\r\n  constructor(public addedStates?: ObjectKeyMap<any>) {}\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { Store } from '../store';\r\nimport { SelectFactory } from '../decorators/select/select-factory';\r\nimport { NgxsConfig, ROOT_STATE_TOKEN } from '../symbols';\r\nimport {\r\n  globalSelectorOptions,\r\n  StateClassInternal,\r\n  StatesAndDefaults\r\n} from '../internal/internals';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { InitState } from '../actions/actions';\r\n\r\n/**\r\n * Root module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsRootModule {\r\n  constructor(\r\n    factory: StateFactory,\r\n    internalStateOperations: InternalStateOperations,\r\n    _store: Store,\r\n    _select: SelectFactory,\r\n    @Optional()\r\n    @Inject(ROOT_STATE_TOKEN)\r\n    states: StateClassInternal[] = [],\r\n    config: NgxsConfig,\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    globalSelectorOptions.set(config.selectorOptions || {});\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(states);\r\n\r\n    internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n    // connect our actions stream\r\n    factory.connectActionHandlers();\r\n\r\n    // dispatch the init action and invoke init and bootstrap functions after\r\n    lifecycleStateManager.ngxsBootstrap(new InitState(), results);\r\n  }\r\n}\r\n","import { Inject, NgModule, Optional } from '@angular/core';\r\n\r\nimport { Store } from '../store';\r\nimport { InternalStateOperations } from '../internal/state-operations';\r\nimport { StateFactory } from '../internal/state-factory';\r\nimport { FEATURE_STATE_TOKEN } from '../symbols';\r\nimport { LifecycleStateManager } from '../internal/lifecycle-state-manager';\r\nimport { StateClassInternal, StatesAndDefaults } from '../internal/internals';\r\nimport { UpdateState } from '../actions/actions';\r\n\r\n/**\r\n * Feature module\r\n * @ignore\r\n */\r\n@NgModule()\r\nexport class NgxsFeatureModule {\r\n  constructor(\r\n    _store: Store,\r\n    internalStateOperations: InternalStateOperations,\r\n    factory: StateFactory,\r\n    @Optional()\r\n    @Inject(FEATURE_STATE_TOKEN)\r\n    states: StateClassInternal[][] = [],\r\n    lifecycleStateManager: LifecycleStateManager\r\n  ) {\r\n    // Since FEATURE_STATE_TOKEN is a multi token, we need to\r\n    // flatten it [[Feature1State, Feature2State], [Feature3State]]\r\n    const flattenedStates: StateClassInternal[] = NgxsFeatureModule.flattenStates(states);\r\n\r\n    // add stores to the state graph and return their defaults\r\n    const results: StatesAndDefaults = factory.addAndReturnDefaults(flattenedStates);\r\n\r\n    if (results.states.length) {\r\n      internalStateOperations.setStateToTheCurrentWithNew(results);\r\n\r\n      // dispatch the update action and invoke init and bootstrap functions after\r\n      lifecycleStateManager.ngxsBootstrap(new UpdateState(results.defaults), results);\r\n    }\r\n  }\r\n\r\n  private static flattenStates(states: StateClassInternal[][] = []): StateClassInternal[] {\r\n    return states.reduce(\r\n      (total: StateClassInternal[], values: StateClassInternal[]) => total.concat(values),\r\n      []\r\n    );\r\n  }\r\n}\r\n","import {\r\n  APP_BOOTSTRAP_LISTENER,\r\n  InjectionToken,\r\n  isDevMode,\r\n  ModuleWithProviders,\r\n  NgModule,\r\n  Provider\r\n} from '@angular/core';\r\nimport { isAngularInTestMode, NgxsBootstrapper, StateClass } from '@ngxs/store/internals';\r\nimport { INITIAL_STATE_TOKEN, InitialState } from '@ngxs/store/internals';\r\n\r\nimport {\r\n  FEATURE_STATE_TOKEN,\r\n  NG_TEST_MODE,\r\n  NG_DEV_MODE,\r\n  NgxsConfig,\r\n  ROOT_STATE_TOKEN,\r\n  NgxsModuleOptions\r\n} from './symbols';\r\nimport { NGXS_EXECUTION_STRATEGY } from './execution/symbols';\r\nimport { StateFactory } from './internal/state-factory';\r\nimport { StateContextFactory } from './internal/state-context-factory';\r\nimport { Actions, InternalActions } from './actions-stream';\r\nimport { LifecycleStateManager } from './internal/lifecycle-state-manager';\r\nimport { InternalDispatchedActionResults, InternalDispatcher } from './internal/dispatcher';\r\nimport { InternalStateOperations } from './internal/state-operations';\r\nimport { Store } from './store';\r\nimport { SelectFactory } from './decorators/select/select-factory';\r\nimport { StateStream } from './internal/state-stream';\r\nimport { PluginManager } from './plugin-manager';\r\nimport { NgxsRootModule } from './modules/ngxs-root.module';\r\nimport { NgxsFeatureModule } from './modules/ngxs-feature.module';\r\nimport { DispatchOutsideZoneNgxsExecutionStrategy } from './execution/dispatch-outside-zone-ngxs-execution-strategy';\r\nimport { InternalNgxsExecutionStrategy } from './execution/internal-ngxs-execution-strategy';\r\nimport { HostEnvironment } from './host-environment/host-environment';\r\nimport { ConfigValidator } from './internal/config-validator';\r\n\r\n/**\r\n * Ngxs Module\r\n */\r\n@NgModule()\r\nexport class NgxsModule {\r\n  private static readonly ROOT_OPTIONS = new InjectionToken<NgxsModuleOptions>('ROOT_OPTIONS');\r\n\r\n  /**\r\n   * Root module factory\r\n   */\r\n  public static forRoot(\r\n    states: StateClass[] = [],\r\n    options: NgxsModuleOptions = {}\r\n  ): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsRootModule,\r\n      providers: [\r\n        StateFactory,\r\n        StateContextFactory,\r\n        Actions,\r\n        InternalActions,\r\n        NgxsBootstrapper,\r\n        ConfigValidator,\r\n        HostEnvironment,\r\n        LifecycleStateManager,\r\n        InternalDispatcher,\r\n        InternalDispatchedActionResults,\r\n        InternalStateOperations,\r\n        InternalNgxsExecutionStrategy,\r\n        Store,\r\n        StateStream,\r\n        SelectFactory,\r\n        PluginManager,\r\n        ...states,\r\n        ...NgxsModule.ngxsTokenProviders(states, options)\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Feature module factory\r\n   */\r\n  public static forFeature(states: StateClass[] = []): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxsFeatureModule,\r\n      providers: [\r\n        StateFactory,\r\n        PluginManager,\r\n        ...states,\r\n        {\r\n          provide: FEATURE_STATE_TOKEN,\r\n          multi: true,\r\n          useValue: states\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  private static ngxsTokenProviders(\r\n    states: StateClass[],\r\n    options: NgxsModuleOptions\r\n  ): Provider[] {\r\n    return [\r\n      {\r\n        provide: NG_DEV_MODE,\r\n        useFactory: NgxsModule.isAngularInTestMode\r\n      },\r\n      {\r\n        provide: NG_TEST_MODE,\r\n        useFactory: NgxsModule.isAngularDevMode\r\n      },\r\n      {\r\n        provide: NGXS_EXECUTION_STRATEGY,\r\n        useClass: options.executionStrategy || DispatchOutsideZoneNgxsExecutionStrategy\r\n      },\r\n      {\r\n        provide: ROOT_STATE_TOKEN,\r\n        useValue: states\r\n      },\r\n      {\r\n        provide: NgxsModule.ROOT_OPTIONS,\r\n        useValue: options\r\n      },\r\n      {\r\n        provide: NgxsConfig,\r\n        useFactory: NgxsModule.ngxsConfigFactory,\r\n        deps: [NgxsModule.ROOT_OPTIONS]\r\n      },\r\n      {\r\n        provide: APP_BOOTSTRAP_LISTENER,\r\n        useFactory: NgxsModule.appBootstrapListenerFactory,\r\n        multi: true,\r\n        deps: [NgxsBootstrapper]\r\n      },\r\n      {\r\n        provide: INITIAL_STATE_TOKEN,\r\n        useFactory: NgxsModule.getInitialState\r\n      }\r\n    ];\r\n  }\r\n\r\n  private static ngxsConfigFactory(options: NgxsModuleOptions): NgxsConfig {\r\n    return Object.assign(new NgxsConfig(), options);\r\n  }\r\n\r\n  private static appBootstrapListenerFactory(bootstrapper: NgxsBootstrapper): Function {\r\n    return () => bootstrapper.bootstrap();\r\n  }\r\n\r\n  private static isAngularInTestMode(): Function {\r\n    return () => isAngularInTestMode();\r\n  }\r\n\r\n  private static isAngularDevMode(): Function {\r\n    return () => isDevMode();\r\n  }\r\n\r\n  private static getInitialState() {\r\n    return InitialState.pop();\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../../configs/messages.config';\r\nimport { propGetter } from '../../internal/internals';\r\nimport { SelectFactory } from './select-factory';\r\nimport { META_KEY } from '../../symbols';\r\n\r\nconst DOLLAR_CHAR_CODE = 36;\r\n\r\nexport function createSelectObservable<T = any>(selector: any): Observable<T> {\r\n  if (!SelectFactory.store) {\r\n    throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECT_FACTORY_NOT_CONNECTED]());\r\n  }\r\n\r\n  return SelectFactory.store.select(selector);\r\n}\r\n\r\nexport function createSelectorFn(name: string, rawSelector?: any, paths: string[] = []): any {\r\n  rawSelector = !rawSelector ? removeDollarAtTheEnd(name) : rawSelector;\r\n\r\n  if (typeof rawSelector === 'string') {\r\n    const propsArray: string[] = paths.length\r\n      ? [rawSelector, ...paths]\r\n      : rawSelector.split('.');\r\n    return propGetter(propsArray, SelectFactory.config!);\r\n  } else if (rawSelector[META_KEY] && rawSelector[META_KEY].path) {\r\n    return propGetter(rawSelector[META_KEY].path.split('.'), SelectFactory.config!);\r\n  }\r\n\r\n  return rawSelector;\r\n}\r\n\r\n/**\r\n * @example If `foo$` => make it just `foo`\r\n */\r\nexport function removeDollarAtTheEnd(name: string): string {\r\n  const lastCharIndex: number = name.length - 1;\r\n  const dollarAtTheEnd: boolean = name.charCodeAt(lastCharIndex) === DOLLAR_CHAR_CODE;\r\n  return dollarAtTheEnd ? name.slice(0, lastCharIndex) : name;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NgxsExecutionStrategy } from './symbols';\r\n\r\n@Injectable()\r\nexport class NoopNgxsExecutionStrategy implements NgxsExecutionStrategy {\r\n  enter<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n\r\n  leave<T>(func: () => T): T {\r\n    return func();\r\n  }\r\n}\r\n","import { ensureStoreMetadata } from '../internal/internals';\r\nimport { ActionType, ActionOptions } from '../actions/symbols';\r\nimport { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\n\r\n/**\r\n * Decorates a method with a action information.\r\n */\r\nexport function Action(\r\n  actions: ActionType | ActionType[],\r\n  options?: ActionOptions\r\n): MethodDecorator {\r\n  return (target: any, name: string | symbol): void => {\r\n    const isStaticMethod = target.hasOwnProperty('prototype');\r\n\r\n    if (isStaticMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.ACTION_DECORATOR]());\r\n    }\r\n\r\n    const meta = ensureStoreMetadata(target.constructor);\r\n\r\n    if (!Array.isArray(actions)) {\r\n      actions = [actions];\r\n    }\r\n\r\n    for (const action of actions) {\r\n      const type = action.type;\r\n\r\n      if (!meta.actions[type]) {\r\n        meta.actions[type] = [];\r\n      }\r\n\r\n      meta.actions[type].push({\r\n        fn: name,\r\n        options: options || {},\r\n        type\r\n      });\r\n    }\r\n  };\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { createSelectObservable, createSelectorFn } from './symbols';\r\n\r\n/**\r\n * Decorator for selecting a slice of state from the store.\r\n */\r\nexport function Select(rawSelector?: any, ...paths: string[]): PropertyDecorator {\r\n  return function(target: any, propertyKey: string | symbol): void {\r\n    const name: string = propertyKey.toString();\r\n    const selectorId = `__${name}__selector`;\r\n    const selector = createSelectorFn(name, rawSelector, paths);\r\n    Object.defineProperties(target, {\r\n      [selectorId]: {\r\n        writable: true,\r\n        enumerable: false,\r\n        configurable: true\r\n      },\r\n      [name]: {\r\n        enumerable: true,\r\n        configurable: true,\r\n        get(): Observable<any> {\r\n          return this[selectorId] || (this[selectorId] = createSelectObservable(selector));\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { CONFIG_MESSAGES, VALIDATION_CODE } from '../configs/messages.config';\r\nimport { createSelector } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for memoizing a state selector.\r\n */\r\nexport function Selector(selectors?: any[]): MethodDecorator {\r\n  return <T>(\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: TypedPropertyDescriptor<T>\r\n  ): TypedPropertyDescriptor<T> | void => {\r\n    const isNotMethod = !(descriptor && descriptor.value !== null);\r\n\r\n    if (isNotMethod) {\r\n      throw new Error(CONFIG_MESSAGES[VALIDATION_CODE.SELECTOR_DECORATOR]());\r\n    }\r\n\r\n    const originalFn = descriptor.value;\r\n    let memoizedFn: any = null;\r\n    const newDescriptor = {\r\n      configurable: true,\r\n      get() {\r\n        // Selector initialisation deferred to here so that it is at runtime, not decorator parse time\r\n        memoizedFn =\r\n          memoizedFn ||\r\n          createSelector(\r\n            selectors,\r\n            originalFn as any,\r\n            {\r\n              containerClass: target,\r\n              selectorName: key.toString(),\r\n              getSelectorOptions() {\r\n                return {};\r\n              }\r\n            }\r\n          );\r\n        return memoizedFn;\r\n      }\r\n    };\r\n    // Add hidden property to descriptor\r\n    (<any>newDescriptor)['originalFn'] = originalFn;\r\n    return newDescriptor;\r\n  };\r\n}\r\n","import { SharedSelectorOptions } from '../internal/internals';\r\nimport { selectorOptionsMetaAccessor } from '../utils/selector-utils';\r\n\r\n/**\r\n * Decorator for setting selector options at a method or class level.\r\n */\r\nexport function SelectorOptions(options: SharedSelectorOptions) {\r\n  return <ClassDecorator & MethodDecorator>(\r\n    function decorate<T>(\r\n      target: any,\r\n      methodName: string,\r\n      descriptor: TypedPropertyDescriptor<T>\r\n    ) {\r\n      if (methodName) {\r\n        // Method Decorator\r\n        const originalFn = descriptor.value || (<any>descriptor).originalFn;\r\n        if (originalFn) {\r\n          selectorOptionsMetaAccessor.defineOptions(originalFn, options);\r\n        }\r\n      } else {\r\n        // Class Decorator\r\n        selectorOptionsMetaAccessor.defineOptions(target, options);\r\n      }\r\n    }\r\n  );\r\n}\r\n","import { ensureStoreMetadata, MetaDataModel, StateClassInternal } from '../internal/internals';\r\nimport { META_KEY, META_OPTIONS_KEY, StoreOptions } from '../symbols';\r\nimport { StoreValidators } from '../utils/store-validators';\r\nimport { StateClass } from '@ngxs/store/internals';\r\n\r\ninterface MutateMetaOptions<T> {\r\n  meta: MetaDataModel;\r\n  inheritedStateClass: StateClassInternal;\r\n  optionsWithInheritance: StoreOptions<T>;\r\n}\r\n\r\n/**\r\n * Decorates a class with ngxs state information.\r\n */\r\nexport function State<T>(options: StoreOptions<T>) {\r\n  function getStateOptions(inheritedStateClass: StateClassInternal): StoreOptions<T> {\r\n    const inheritanceOptions: Partial<StoreOptions<T>> =\r\n      inheritedStateClass[META_OPTIONS_KEY] || {};\r\n    return { ...inheritanceOptions, ...options } as StoreOptions<T>;\r\n  }\r\n\r\n  function mutateMetaData(params: MutateMetaOptions<T>): void {\r\n    const { meta, inheritedStateClass, optionsWithInheritance } = params;\r\n    const { children, defaults, name } = optionsWithInheritance;\r\n    StoreValidators.checkCorrectStateName(name);\r\n\r\n    if (inheritedStateClass.hasOwnProperty(META_KEY)) {\r\n      const inheritedMeta: Partial<MetaDataModel> = inheritedStateClass[META_KEY] || {};\r\n      meta.actions = { ...meta.actions, ...inheritedMeta.actions };\r\n    }\r\n\r\n    meta.children = children;\r\n    meta.defaults = defaults;\r\n    meta.name = name;\r\n  }\r\n\r\n  return (target: StateClass): void => {\r\n    const stateClass: StateClassInternal = target;\r\n    const meta: MetaDataModel = ensureStoreMetadata(stateClass);\r\n    const inheritedStateClass: StateClassInternal = Object.getPrototypeOf(stateClass);\r\n    const optionsWithInheritance: StoreOptions<T> = getStateOptions(inheritedStateClass);\r\n    mutateMetaData({ meta, inheritedStateClass, optionsWithInheritance });\r\n    stateClass[META_OPTIONS_KEY] = optionsWithInheritance;\r\n  };\r\n}\r\n"]}